
CH_22_04.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000256  000002ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000256  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002d6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000308  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  00000348  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e2f  00000000  00000000  000003b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009c0  00000000  00000000  000011e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000424  00000000  00000000  00001ba7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c8  00000000  00000000  00001fcc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000485  00000000  00000000  00002094  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000446  00000000  00000000  00002519  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  0000295f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e5       	ldi	r30, 0x56	; 86
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 30       	cpi	r26, 0x0C	; 12
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	02 d0       	rcall	.+4      	; 0xb8 <main>
  b4:	ce c0       	rjmp	.+412    	; 0x252 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <main>:
// 한번에 몇 비트를 보낼거야?
uint8_t MODE = 4;	// 8비트 모드인 경우 8, 4비트 모드인 경우 4

int main(void)
{
	LCD_init();					// 텍스트 LCD 초기화
  b8:	7e d0       	rcall	.+252    	; 0x1b6 <LCD_init>
	
	LCD_write_string("Hello LCD!");		// 문자열 출력
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	91 e0       	ldi	r25, 0x01	; 1
  be:	aa d0       	rcall	.+340    	; 0x214 <LCD_write_string>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c0:	2f ef       	ldi	r18, 0xFF	; 255
  c2:	83 ed       	ldi	r24, 0xD3	; 211
  c4:	90 e3       	ldi	r25, 0x30	; 48
  c6:	21 50       	subi	r18, 0x01	; 1
  c8:	80 40       	sbci	r24, 0x00	; 0
  ca:	90 40       	sbci	r25, 0x00	; 0
  cc:	e1 f7       	brne	.-8      	; 0xc6 <main+0xe>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <main+0x18>
	
	_delay_ms(1000);			// 1초 대기
	
	LCD_clear();				// 화면 지움
  d0:	00 00       	nop
	
	// 화면에 보이는 영역은 기본값으로 0~1행, 0~15열로 설정되어 있다.
	LCD_goto_XY(0, 0);			// 0행 0열로 이동
  d2:	68 d0       	rcall	.+208    	; 0x1a4 <LCD_clear>
  d4:	60 e0       	ldi	r22, 0x00	; 0
  d6:	80 e0       	ldi	r24, 0x00	; 0
	LCD_write_data('1');			// 문자 단위 출력
  d8:	b2 d0       	rcall	.+356    	; 0x23e <LCD_goto_XY>
  da:	81 e3       	ldi	r24, 0x31	; 49
	LCD_goto_XY(0, 5);
  dc:	23 d0       	rcall	.+70     	; 0x124 <LCD_write_data>
  de:	65 e0       	ldi	r22, 0x05	; 5
  e0:	80 e0       	ldi	r24, 0x00	; 0
	LCD_write_data('2');
  e2:	ad d0       	rcall	.+346    	; 0x23e <LCD_goto_XY>
  e4:	82 e3       	ldi	r24, 0x32	; 50
	LCD_goto_XY(1, 0);
  e6:	1e d0       	rcall	.+60     	; 0x124 <LCD_write_data>
  e8:	60 e0       	ldi	r22, 0x00	; 0
	LCD_write_data('3');
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	a8 d0       	rcall	.+336    	; 0x23e <LCD_goto_XY>
  ee:	83 e3       	ldi	r24, 0x33	; 51
	LCD_goto_XY(1, 5);
  f0:	19 d0       	rcall	.+50     	; 0x124 <LCD_write_data>
  f2:	65 e0       	ldi	r22, 0x05	; 5
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	a3 d0       	rcall	.+326    	; 0x23e <LCD_goto_XY>
	LCD_write_data('4');
  f8:	84 e3       	ldi	r24, 0x34	; 52
  fa:	14 d0       	rcall	.+40     	; 0x124 <LCD_write_data>
  fc:	ff cf       	rjmp	.-2      	; 0xfc <main+0x44>

000000fe <LCD_pulse_enable>:
﻿#include "Text_LCD.h"

void LCD_pulse_enable(void) 		// 하강 에지에서 동작
{
	PORT_CONTROL |= (1 << E_PIN);	// E를 HIGH로
  fe:	e5 e6       	ldi	r30, 0x65	; 101
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	80 81       	ld	r24, Z
 104:	84 60       	ori	r24, 0x04	; 4
 106:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 108:	85 e0       	ldi	r24, 0x05	; 5
 10a:	8a 95       	dec	r24
 10c:	f1 f7       	brne	.-4      	; 0x10a <LCD_pulse_enable+0xc>
 10e:	00 00       	nop
	_delay_us(1);
	PORT_CONTROL &= ~(1 << E_PIN);	// E를 LOW로
 110:	80 81       	ld	r24, Z
 112:	8b 7f       	andi	r24, 0xFB	; 251
 114:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 116:	8f e9       	ldi	r24, 0x9F	; 159
 118:	9f e0       	ldi	r25, 0x0F	; 15
 11a:	01 97       	sbiw	r24, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <LCD_pulse_enable+0x1c>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <LCD_pulse_enable+0x22>
 120:	00 00       	nop
 122:	08 95       	ret

00000124 <LCD_write_data>:
	_delay_ms(1);
}

void LCD_write_data(uint8_t data)
{
 124:	cf 93       	push	r28
 126:	c8 2f       	mov	r28, r24
	// Register Select 1(Write)
	PORT_CONTROL |= (1 << RS_PIN);	// 문자 출력에서 RS는 1
 128:	e5 e6       	ldi	r30, 0x65	; 101
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	80 81       	ld	r24, Z
 12e:	82 60       	ori	r24, 0x02	; 2
 130:	80 83       	st	Z, r24
	
	if(MODE == 8){
 132:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 136:	88 30       	cpi	r24, 0x08	; 8
 138:	19 f4       	brne	.+6      	; 0x140 <LCD_write_data+0x1c>
		PORT_DATA = data;			// 출력할 문자 데이터
 13a:	c5 bb       	out	0x15, r28	; 21
		LCD_pulse_enable();
 13c:	e0 df       	rcall	.-64     	; 0xfe <LCD_pulse_enable>
 13e:	0a c0       	rjmp	.+20     	; 0x154 <LCD_write_data+0x30>
	}
	else{
		PORT_DATA = data & 0xF0;		// 상위 4비트
 140:	8c 2f       	mov	r24, r28
 142:	80 7f       	andi	r24, 0xF0	; 240
		LCD_pulse_enable();
 144:	85 bb       	out	0x15, r24	; 21
 146:	db df       	rcall	.-74     	; 0xfe <LCD_pulse_enable>
		
		PORT_DATA = (data << 4) & 0xF0;	// 하위 4비트
 148:	20 e1       	ldi	r18, 0x10	; 16
 14a:	c2 9f       	mul	r28, r18
 14c:	c0 01       	movw	r24, r0
 14e:	11 24       	eor	r1, r1
		LCD_pulse_enable();
 150:	85 bb       	out	0x15, r24	; 21
 152:	d5 df       	rcall	.-86     	; 0xfe <LCD_pulse_enable>
 154:	8f e3       	ldi	r24, 0x3F	; 63
 156:	9f e1       	ldi	r25, 0x1F	; 31
 158:	01 97       	sbiw	r24, 0x01	; 1
 15a:	f1 f7       	brne	.-4      	; 0x158 <LCD_write_data+0x34>
 15c:	00 c0       	rjmp	.+0      	; 0x15e <LCD_write_data+0x3a>
 15e:	00 00       	nop
	}
	_delay_ms(2);
}
 160:	cf 91       	pop	r28
 162:	08 95       	ret

00000164 <LCD_write_command>:

void LCD_write_command(uint8_t command)
{
 164:	cf 93       	push	r28
 166:	c8 2f       	mov	r28, r24
	PORT_CONTROL &= ~(1 << RS_PIN);	// 명령어 실행에서 RS는 0
 168:	e5 e6       	ldi	r30, 0x65	; 101
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	80 81       	ld	r24, Z
 16e:	8d 7f       	andi	r24, 0xFD	; 253
 170:	80 83       	st	Z, r24
	
	if(MODE == 8) {
 172:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 176:	88 30       	cpi	r24, 0x08	; 8
 178:	19 f4       	brne	.+6      	; 0x180 <LCD_write_command+0x1c>
		PORT_DATA = command;		// 데이터 핀에 명령어 전달
 17a:	c5 bb       	out	0x15, r28	; 21
		LCD_pulse_enable();			// 명령어 실행
 17c:	c0 df       	rcall	.-128    	; 0xfe <LCD_pulse_enable>
 17e:	0a c0       	rjmp	.+20     	; 0x194 <LCD_write_command+0x30>
	}
	else{
		PORT_DATA = command & 0xF0;		// 상위 4비트
 180:	8c 2f       	mov	r24, r28
 182:	80 7f       	andi	r24, 0xF0	; 240
		LCD_pulse_enable();
 184:	85 bb       	out	0x15, r24	; 21
 186:	bb df       	rcall	.-138    	; 0xfe <LCD_pulse_enable>
		
		PORT_DATA = (command << 4) & 0xF0;	// 하위 4비트
 188:	20 e1       	ldi	r18, 0x10	; 16
 18a:	c2 9f       	mul	r28, r18
 18c:	c0 01       	movw	r24, r0
 18e:	11 24       	eor	r1, r1
		LCD_pulse_enable();
 190:	85 bb       	out	0x15, r24	; 21
 192:	b5 df       	rcall	.-150    	; 0xfe <LCD_pulse_enable>
 194:	8f e3       	ldi	r24, 0x3F	; 63
 196:	9f e1       	ldi	r25, 0x1F	; 31
 198:	01 97       	sbiw	r24, 0x01	; 1
 19a:	f1 f7       	brne	.-4      	; 0x198 <LCD_write_command+0x34>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <LCD_write_command+0x3a>
 19e:	00 00       	nop
	}
	_delay_ms(2);
}
 1a0:	cf 91       	pop	r28
 1a2:	08 95       	ret

000001a4 <LCD_clear>:

void LCD_clear(void)
{
	LCD_write_command(COMMAND_CLEAR_DISPLAY);
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	de df       	rcall	.-68     	; 0x164 <LCD_write_command>
 1a8:	8f e3       	ldi	r24, 0x3F	; 63
 1aa:	9f e1       	ldi	r25, 0x1F	; 31
 1ac:	01 97       	sbiw	r24, 0x01	; 1
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <LCD_clear+0x8>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <LCD_clear+0xe>
 1b2:	00 00       	nop
 1b4:	08 95       	ret

000001b6 <LCD_init>:
 1b6:	2f ef       	ldi	r18, 0xFF	; 255
 1b8:	80 e7       	ldi	r24, 0x70	; 112
 1ba:	92 e0       	ldi	r25, 0x02	; 2
 1bc:	21 50       	subi	r18, 0x01	; 1
 1be:	80 40       	sbci	r24, 0x00	; 0
 1c0:	90 40       	sbci	r25, 0x00	; 0
 1c2:	e1 f7       	brne	.-8      	; 0x1bc <LCD_init+0x6>
 1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <LCD_init+0x10>
 1c6:	00 00       	nop
void LCD_init(void)
{
	_delay_ms(50);				// 초기 구동 시간
	
	// 연결 핀을 출력으로 설정
	if(MODE == 8) DDR_DATA = 0xFF;
 1c8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1cc:	88 30       	cpi	r24, 0x08	; 8
 1ce:	19 f4       	brne	.+6      	; 0x1d6 <LCD_init+0x20>
 1d0:	8f ef       	ldi	r24, 0xFF	; 255
 1d2:	84 bb       	out	0x14, r24	; 20
 1d4:	03 c0       	rjmp	.+6      	; 0x1dc <LCD_init+0x26>
	else DDR_DATA |= 0xF0;
 1d6:	84 b3       	in	r24, 0x14	; 20
 1d8:	80 6f       	ori	r24, 0xF0	; 240
 1da:	84 bb       	out	0x14, r24	; 20
	PORT_DATA = 0x00;
 1dc:	15 ba       	out	0x15, r1	; 21
	
	// RS: Register Select
	// RW: Read Write
	// E: 
	DDR_CONTROL |= (1 << RS_PIN) | (1 << RW_PIN) | (1 << E_PIN);
 1de:	e4 e6       	ldi	r30, 0x64	; 100
 1e0:	f0 e0       	ldi	r31, 0x00	; 0
 1e2:	80 81       	ld	r24, Z
 1e4:	87 60       	ori	r24, 0x07	; 7
 1e6:	80 83       	st	Z, r24
	
	// RW 핀으로 LOW를 출력하여 쓰기 전용으로 사용
	PORT_CONTROL &= ~(1 << RW_PIN);
 1e8:	e5 e6       	ldi	r30, 0x65	; 101
 1ea:	f0 e0       	ldi	r31, 0x00	; 0
 1ec:	80 81       	ld	r24, Z
 1ee:	8e 7f       	andi	r24, 0xFE	; 254
 1f0:	80 83       	st	Z, r24
	
	if(MODE == 8)
 1f2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1f6:	88 30       	cpi	r24, 0x08	; 8
 1f8:	19 f4       	brne	.+6      	; 0x200 <LCD_init+0x4a>
	LCD_write_command(COMMAND_8_BIT_MODE);		// 8비트 모드
 1fa:	88 e3       	ldi	r24, 0x38	; 56
 1fc:	b3 df       	rcall	.-154    	; 0x164 <LCD_write_command>
 1fe:	04 c0       	rjmp	.+8      	; 0x208 <LCD_init+0x52>
	else{
		LCD_write_command(0x02);				// 4비트 모드 추가 명령
 200:	82 e0       	ldi	r24, 0x02	; 2
 202:	b0 df       	rcall	.-160    	; 0x164 <LCD_write_command>
		LCD_write_command(COMMAND_4_BIT_MODE);		// 4비트 모드
 204:	88 e2       	ldi	r24, 0x28	; 40
 206:	ae df       	rcall	.-164    	; 0x164 <LCD_write_command>
	// display on/off control
	// 화면 on, 커서 off, 커서 깜빡임 off
	uint8_t command = 0x08 | (1 << COMMAND_DISPLAY_ON_OFF_BIT)
							| (1 << COMMAND_CURSOR_ON_OFF_BIT)
							| (1 << COMMAND_BLINK_ON_OFF_BIT);
	LCD_write_command(command);
 208:	8f e0       	ldi	r24, 0x0F	; 15
 20a:	ac df       	rcall	.-168    	; 0x164 <LCD_write_command>

	LCD_clear();			// 화면 지움
 20c:	cb df       	rcall	.-106    	; 0x1a4 <LCD_clear>
 20e:	86 e0       	ldi	r24, 0x06	; 6

	// Entry Mode Set
	// 출력 후 커서를 오른쪽으로 옮김, 즉, DDRAM의 주소가 증가하며 화면 이동은 없음
	LCD_write_command(0x06);
 210:	a9 cf       	rjmp	.-174    	; 0x164 <LCD_write_command>
 212:	08 95       	ret

00000214 <LCD_write_string>:
 214:	0f 93       	push	r16
 216:	1f 93       	push	r17
}

void LCD_write_string(char *string)
{
 218:	cf 93       	push	r28
 21a:	fc 01       	movw	r30, r24
	uint8_t i;
	for(i = 0; string[i]; i++)			// 종료 문자를 만날 때까지
 21c:	80 81       	ld	r24, Z
 21e:	88 23       	and	r24, r24
 220:	51 f0       	breq	.+20     	; 0x236 <LCD_write_string+0x22>
 222:	8f 01       	movw	r16, r30
 224:	c0 e0       	ldi	r28, 0x00	; 0
	LCD_write_data(string[i]);		// 문자 단위 출력
 226:	7e df       	rcall	.-260    	; 0x124 <LCD_write_data>
}

void LCD_write_string(char *string)
{
	uint8_t i;
	for(i = 0; string[i]; i++)			// 종료 문자를 만날 때까지
 228:	cf 5f       	subi	r28, 0xFF	; 255
 22a:	f8 01       	movw	r30, r16
 22c:	ec 0f       	add	r30, r28
 22e:	f1 1d       	adc	r31, r1
 230:	80 81       	ld	r24, Z
 232:	81 11       	cpse	r24, r1
 234:	f8 cf       	rjmp	.-16     	; 0x226 <LCD_write_string+0x12>
	LCD_write_data(string[i]);		// 문자 단위 출력
}
 236:	cf 91       	pop	r28
 238:	1f 91       	pop	r17
 23a:	0f 91       	pop	r16
 23c:	08 95       	ret

0000023e <LCD_goto_XY>:

	// 첫째 라인 시작 주소는 0x00, 둘째 라인 시작 주소는 0x40
	uint8_t address = (0x40 * row) + col;
	uint8_t command = 0x80 + address;
	
	LCD_write_command(command);	// 커서 이동
 23e:	81 70       	andi	r24, 0x01	; 1
 240:	6f 70       	andi	r22, 0x0F	; 15
 242:	90 e4       	ldi	r25, 0x40	; 64
 244:	89 9f       	mul	r24, r25
 246:	60 0d       	add	r22, r0
 248:	11 24       	eor	r1, r1
 24a:	86 2f       	mov	r24, r22
 24c:	80 58       	subi	r24, 0x80	; 128
 24e:	8a cf       	rjmp	.-236    	; 0x164 <LCD_write_command>
 250:	08 95       	ret

00000252 <_exit>:
 252:	f8 94       	cli

00000254 <__stop_program>:
 254:	ff cf       	rjmp	.-2      	; 0x254 <__stop_program>

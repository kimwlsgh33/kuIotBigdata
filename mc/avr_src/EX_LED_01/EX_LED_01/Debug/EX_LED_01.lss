
EX_LED_01.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000015c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000108  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000015c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000018c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b34  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000088d  00000000  00000000  00000d58  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000439  00000000  00000000  000015e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000094  00000000  00000000  00001a20  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000477  00000000  00000000  00001ab4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000028c  00000000  00000000  00001f2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  000021b7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	0c d0       	rcall	.+24     	; 0xb2 <main>
  9a:	34 c0       	rjmp	.+104    	; 0x104 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <FUNC_LED_TOGGLE>:
// void FUNC_GPIO(PORTA, 0, 0); // 포트, 핀, 모드

void FUNC_LED_TOGGLE(unsigned char numPin){
	// 1111 1110 ^ 0000 0001 => 1111 1111
	// 1111 1111 ^ 0000 0001 => 1111 1110
	PORTC ^= 0x01 << numPin;
  9e:	95 b3       	in	r25, 0x15	; 21
  a0:	21 e0       	ldi	r18, 0x01	; 1
  a2:	30 e0       	ldi	r19, 0x00	; 0
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <FUNC_LED_TOGGLE+0xa>
  a6:	22 0f       	add	r18, r18
  a8:	8a 95       	dec	r24
  aa:	ea f7       	brpl	.-6      	; 0xa6 <FUNC_LED_TOGGLE+0x8>
  ac:	29 27       	eor	r18, r25
  ae:	25 bb       	out	0x15, r18	; 21
  b0:	08 95       	ret

000000b2 <main>:
// LED

int main(void)
{
	/* Replace with your application code */
	DDRC = 0x0F;
  b2:	8f e0       	ldi	r24, 0x0F	; 15
  b4:	84 bb       	out	0x14, r24	; 20
void FUNC_ORDER_BY_DESC(void);
// LED 4개 다키는 함수
// LED

int main(void)
{
  b6:	c0 e0       	ldi	r28, 0x00	; 0
		// 		FUNC_LED_OFF(3);
		// 		_delay_ms(100);

		for (int i = 0; i < 4; ++i) {
			//FUNC_LED_ON2(i);
			FUNC_LED_TOGGLE(i);
  b8:	8c 2f       	mov	r24, r28
  ba:	f1 df       	rcall	.-30     	; 0x9e <FUNC_LED_TOGGLE>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  bc:	2f ef       	ldi	r18, 0xFF	; 255
  be:	8f e7       	ldi	r24, 0x7F	; 127
  c0:	94 e0       	ldi	r25, 0x04	; 4
  c2:	21 50       	subi	r18, 0x01	; 1
  c4:	80 40       	sbci	r24, 0x00	; 0
  c6:	90 40       	sbci	r25, 0x00	; 0
  c8:	e1 f7       	brne	.-8      	; 0xc2 <main+0x10>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <main+0x1a>
  cc:	00 00       	nop
  ce:	cf 5f       	subi	r28, 0xFF	; 255
		// 		FUNC_LED_OFF(1);
		// 		FUNC_LED_OFF(2);
		// 		FUNC_LED_OFF(3);
		// 		_delay_ms(100);

		for (int i = 0; i < 4; ++i) {
  d0:	c4 30       	cpi	r28, 0x04	; 4
  d2:	91 f7       	brne	.-28     	; 0xb8 <main+0x6>
  d4:	2f ef       	ldi	r18, 0xFF	; 255
  d6:	8f e7       	ldi	r24, 0x7F	; 127
  d8:	96 e1       	ldi	r25, 0x16	; 22
  da:	21 50       	subi	r18, 0x01	; 1
  dc:	80 40       	sbci	r24, 0x00	; 0
  de:	90 40       	sbci	r25, 0x00	; 0
  e0:	e1 f7       	brne	.-8      	; 0xda <main+0x28>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <main+0x32>
  e4:	00 00       	nop
  e6:	c3 e0       	ldi	r28, 0x03	; 3
		
		_delay_ms(500);
		
		for (int i = 0; i < 4; ++i) {
			//FUNC_LED_OFF2(3 - i);
			FUNC_LED_TOGGLE(3 - i);
  e8:	8c 2f       	mov	r24, r28
  ea:	d9 df       	rcall	.-78     	; 0x9e <FUNC_LED_TOGGLE>
  ec:	2f ef       	ldi	r18, 0xFF	; 255
  ee:	8f e7       	ldi	r24, 0x7F	; 127
  f0:	94 e0       	ldi	r25, 0x04	; 4
  f2:	21 50       	subi	r18, 0x01	; 1
  f4:	80 40       	sbci	r24, 0x00	; 0
  f6:	90 40       	sbci	r25, 0x00	; 0
  f8:	e1 f7       	brne	.-8      	; 0xf2 <main+0x40>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <main+0x4a>
  fc:	00 00       	nop
  fe:	c1 50       	subi	r28, 0x01	; 1
 100:	98 f7       	brcc	.-26     	; 0xe8 <main+0x36>
 102:	d9 cf       	rjmp	.-78     	; 0xb6 <main+0x4>

00000104 <_exit>:
 104:	f8 94       	cli

00000106 <__stop_program>:
 106:	ff cf       	rjmp	.-2      	; 0x106 <__stop_program>

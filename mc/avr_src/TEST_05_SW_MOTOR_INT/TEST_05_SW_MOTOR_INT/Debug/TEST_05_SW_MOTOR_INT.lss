
TEST_05_SW_MOTOR_INT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000260  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000020c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000290  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  000002d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000978  00000000  00000000  00000330  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000849  00000000  00000000  00000ca8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000034a  00000000  00000000  000014f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000017c  00000000  00000000  0000183c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000411  00000000  00000000  000019b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002d7  00000000  00000000  00001dc9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  000020a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	48 c0       	rjmp	.+144    	; 0xa6 <__vector_5>
  16:	00 00       	nop
  18:	a1 c0       	rjmp	.+322    	; 0x15c <__vector_6>
  1a:	00 00       	nop
  1c:	ca c0       	rjmp	.+404    	; 0x1b2 <__vector_7>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	43 d0       	rcall	.+134    	; 0x120 <main>
  9a:	b6 c0       	rjmp	.+364    	; 0x208 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <FUNC_MOTOR.part.0>:

void FUNC_MOTOR(int mode){
	// 0: stop, 1: CW, 2: CCW
	switch(mode) {
		case CW:
			PORTB |= (0x01 << PORTB5); // Enable
  9e:	c5 9a       	sbi	0x18, 5	; 24
			// Right (01)
			PORTD &= ~(0x01 << PORTD5);
  a0:	95 98       	cbi	0x12, 5	; 18
			PORTD |= (0x01 << PORTD4);
  a2:	94 9a       	sbi	0x12, 4	; 18
  a4:	08 95       	ret

000000a6 <__vector_5>:

// Functions
void FUNC_MOTOR(int mode);

// SW0 interrupt
SIGNAL(INT4_vect) {
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	0b b6       	in	r0, 0x3b	; 59
  b2:	0f 92       	push	r0
  b4:	2f 93       	push	r18
  b6:	3f 93       	push	r19
  b8:	4f 93       	push	r20
  ba:	5f 93       	push	r21
  bc:	6f 93       	push	r22
  be:	7f 93       	push	r23
  c0:	8f 93       	push	r24
  c2:	9f 93       	push	r25
  c4:	af 93       	push	r26
  c6:	bf 93       	push	r27
  c8:	ef 93       	push	r30
  ca:	ff 93       	push	r31
	cli();
  cc:	f8 94       	cli
  ce:	e7 df       	rcall	.-50     	; 0x9e <FUNC_MOTOR.part.0>
	// Right (01)
// 	PORTD &= ~(0x01 << PORTD5);
// 	PORTD |= (0x01 << PORTD4);
	FUNC_MOTOR(CW);
	sei();
  d0:	78 94       	sei
}
  d2:	ff 91       	pop	r31
  d4:	ef 91       	pop	r30
  d6:	bf 91       	pop	r27
  d8:	af 91       	pop	r26
  da:	9f 91       	pop	r25
  dc:	8f 91       	pop	r24
  de:	7f 91       	pop	r23
  e0:	6f 91       	pop	r22
  e2:	5f 91       	pop	r21
  e4:	4f 91       	pop	r20
  e6:	3f 91       	pop	r19
  e8:	2f 91       	pop	r18
  ea:	0f 90       	pop	r0
  ec:	0b be       	out	0x3b, r0	; 59
  ee:	0f 90       	pop	r0
  f0:	0f be       	out	0x3f, r0	; 63
  f2:	0f 90       	pop	r0
  f4:	1f 90       	pop	r1
  f6:	18 95       	reti

000000f8 <setDD>:
}


void setDD(void) {
	// Set SW0~2 direction to INPUT(0)
	DDRE &= ~(0x01 << PINE4 | 0x01 << PINE5 | 0x01 << PINE6);
  f8:	82 b1       	in	r24, 0x02	; 2
  fa:	8f 78       	andi	r24, 0x8F	; 143
  fc:	82 b9       	out	0x02, r24	; 2
	// Set Motor P/N direction to OUTPUT(1)
	DDRD |= (0x01 << PORTD4 | 0x01 << PORTD5);
  fe:	81 b3       	in	r24, 0x11	; 17
 100:	80 63       	ori	r24, 0x30	; 48
 102:	81 bb       	out	0x11, r24	; 17
	// Set Motor EN direction to OUTPUT(1)
	DDRB |= (0x01 << PORTB5);
 104:	bd 9a       	sbi	0x17, 5	; 23
 106:	08 95       	ret

00000108 <initINT>:
}


void initINT(void) {
	// Set SW0~2 interrupt control to RISING EDGE(1,1)
	EICRB |= (0x01 | 0x01 << 1 | 0x01 << 2 | 0x01 << 3 | 0x01 << 4 | 0x01 << 5);
 108:	8a b7       	in	r24, 0x3a	; 58
 10a:	8f 63       	ori	r24, 0x3F	; 63
 10c:	8a bf       	out	0x3a, r24	; 58
	// Set SW0~2 interrupt flag to OFF(0) -> Check whether Interrupt Service Routine is done (0: done)
	EIFR |= (0x01 << PINE4 | 0x01 << PINE5 | 0x01 << PINE6);
 10e:	88 b7       	in	r24, 0x38	; 56
 110:	80 67       	ori	r24, 0x70	; 112
 112:	88 bf       	out	0x38, r24	; 56
 114:	08 95       	ret

00000116 <enINT>:
}


void enINT(void) {
	// Mask SW0~2 interrupt
	EIMSK |= (0x01 << PINE4 | 0x01 << PINE5 | 0x01 << PINE6);
 116:	89 b7       	in	r24, 0x39	; 57
 118:	80 67       	ori	r24, 0x70	; 112
 11a:	89 bf       	out	0x39, r24	; 57
	// Enable global interrupt
	sei();
 11c:	78 94       	sei
 11e:	08 95       	ret

00000120 <main>:
	sei();
}

int main(void)
{
	setDD();
 120:	eb df       	rcall	.-42     	; 0xf8 <setDD>
	initINT();
 122:	f2 df       	rcall	.-28     	; 0x108 <initINT>
	enINT();
 124:	f8 df       	rcall	.-16     	; 0x116 <enINT>
 126:	ff cf       	rjmp	.-2      	; 0x126 <main+0x6>

00000128 <FUNC_MOTOR>:
 128:	81 30       	cpi	r24, 0x01	; 1
}


void FUNC_MOTOR(int mode){
	// 0: stop, 1: CW, 2: CCW
	switch(mode) {
 12a:	91 05       	cpc	r25, r1
 12c:	51 f0       	breq	.+20     	; 0x142 <FUNC_MOTOR+0x1a>
 12e:	1c f4       	brge	.+6      	; 0x136 <FUNC_MOTOR+0xe>
 130:	89 2b       	or	r24, r25
 132:	79 f0       	breq	.+30     	; 0x152 <FUNC_MOTOR+0x2a>
 134:	08 95       	ret
 136:	82 30       	cpi	r24, 0x02	; 2
 138:	91 05       	cpc	r25, r1
 13a:	21 f0       	breq	.+8      	; 0x144 <FUNC_MOTOR+0x1c>
 13c:	03 97       	sbiw	r24, 0x03	; 3
 13e:	31 f0       	breq	.+12     	; 0x14c <FUNC_MOTOR+0x24>
 140:	08 95       	ret
 142:	ad cf       	rjmp	.-166    	; 0x9e <FUNC_MOTOR.part.0>
			// Right (01)
			PORTD &= ~(0x01 << PORTD5);
			PORTD |= (0x01 << PORTD4);
			break;
		case CCW:
			PORTB |= (0x01 << PORTB5); // Enable
 144:	c5 9a       	sbi	0x18, 5	; 24
			// Left (10)
			PORTD &= ~(0x01 << PORTD4);
 146:	94 98       	cbi	0x12, 4	; 18
			PORTD |= (0x01 << PORTD5);
 148:	95 9a       	sbi	0x12, 5	; 18
			break;
 14a:	08 95       	ret
		case BREAK:
			PORTD |= (0x01 << PORTD4 | 0x01 << PORTD5);
 14c:	82 b3       	in	r24, 0x12	; 18
 14e:	80 63       	ori	r24, 0x30	; 48
 150:	03 c0       	rjmp	.+6      	; 0x158 <FUNC_MOTOR+0x30>
			break;
		case STOP:
			PORTB &= ~(0x01 << PORTB5); // Disable
 152:	c5 98       	cbi	0x18, 5	; 24
			PORTD &= ~(0x01 << PORTD4 | 0x01 << PORTD5);
 154:	82 b3       	in	r24, 0x12	; 18
 156:	8f 7c       	andi	r24, 0xCF	; 207
 158:	82 bb       	out	0x12, r24	; 18
 15a:	08 95       	ret

0000015c <__vector_6>:
	FUNC_MOTOR(CW);
	sei();
}

// SW1 interrupt
SIGNAL(INT5_vect) {
 15c:	1f 92       	push	r1
 15e:	0f 92       	push	r0
 160:	0f b6       	in	r0, 0x3f	; 63
 162:	0f 92       	push	r0
 164:	11 24       	eor	r1, r1
 166:	0b b6       	in	r0, 0x3b	; 59
 168:	0f 92       	push	r0
 16a:	2f 93       	push	r18
 16c:	3f 93       	push	r19
 16e:	4f 93       	push	r20
 170:	5f 93       	push	r21
 172:	6f 93       	push	r22
 174:	7f 93       	push	r23
 176:	8f 93       	push	r24
 178:	9f 93       	push	r25
 17a:	af 93       	push	r26
 17c:	bf 93       	push	r27
 17e:	ef 93       	push	r30
 180:	ff 93       	push	r31
	cli();
 182:	f8 94       	cli
	// Left (10)
// 	PORTD &= ~(0x01 << PORTD4);
// 	PORTD |= (0x01 << PORTD5);
	FUNC_MOTOR(CCW);
 184:	82 e0       	ldi	r24, 0x02	; 2
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	cf df       	rcall	.-98     	; 0x128 <FUNC_MOTOR>
	sei();
 18a:	78 94       	sei
}
 18c:	ff 91       	pop	r31
 18e:	ef 91       	pop	r30
 190:	bf 91       	pop	r27
 192:	af 91       	pop	r26
 194:	9f 91       	pop	r25
 196:	8f 91       	pop	r24
 198:	7f 91       	pop	r23
 19a:	6f 91       	pop	r22
 19c:	5f 91       	pop	r21
 19e:	4f 91       	pop	r20
 1a0:	3f 91       	pop	r19
 1a2:	2f 91       	pop	r18
 1a4:	0f 90       	pop	r0
 1a6:	0b be       	out	0x3b, r0	; 59
 1a8:	0f 90       	pop	r0
 1aa:	0f be       	out	0x3f, r0	; 63
 1ac:	0f 90       	pop	r0
 1ae:	1f 90       	pop	r1
 1b0:	18 95       	reti

000001b2 <__vector_7>:

// SW2 interrupt
SIGNAL(INT6_vect) {
 1b2:	1f 92       	push	r1
 1b4:	0f 92       	push	r0
 1b6:	0f b6       	in	r0, 0x3f	; 63
 1b8:	0f 92       	push	r0
 1ba:	11 24       	eor	r1, r1
 1bc:	0b b6       	in	r0, 0x3b	; 59
 1be:	0f 92       	push	r0
 1c0:	2f 93       	push	r18
 1c2:	3f 93       	push	r19
 1c4:	4f 93       	push	r20
 1c6:	5f 93       	push	r21
 1c8:	6f 93       	push	r22
 1ca:	7f 93       	push	r23
 1cc:	8f 93       	push	r24
 1ce:	9f 93       	push	r25
 1d0:	af 93       	push	r26
 1d2:	bf 93       	push	r27
 1d4:	ef 93       	push	r30
 1d6:	ff 93       	push	r31
	cli();
 1d8:	f8 94       	cli
	// Stop
// 	PORTB &= ~(0x01 << PORTB5);
	FUNC_MOTOR(STOP);
 1da:	80 e0       	ldi	r24, 0x00	; 0
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	a4 df       	rcall	.-184    	; 0x128 <FUNC_MOTOR>
	sei();
 1e0:	78 94       	sei
}
 1e2:	ff 91       	pop	r31
 1e4:	ef 91       	pop	r30
 1e6:	bf 91       	pop	r27
 1e8:	af 91       	pop	r26
 1ea:	9f 91       	pop	r25
 1ec:	8f 91       	pop	r24
 1ee:	7f 91       	pop	r23
 1f0:	6f 91       	pop	r22
 1f2:	5f 91       	pop	r21
 1f4:	4f 91       	pop	r20
 1f6:	3f 91       	pop	r19
 1f8:	2f 91       	pop	r18
 1fa:	0f 90       	pop	r0
 1fc:	0b be       	out	0x3b, r0	; 59
 1fe:	0f 90       	pop	r0
 200:	0f be       	out	0x3f, r0	; 63
 202:	0f 90       	pop	r0
 204:	1f 90       	pop	r1
 206:	18 95       	reti

00000208 <_exit>:
 208:	f8 94       	cli

0000020a <__stop_program>:
 20a:	ff cf       	rjmp	.-2      	; 0x20a <__stop_program>

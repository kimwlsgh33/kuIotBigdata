
TEST_05_MOTOR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001d0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000244  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000274  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000924  00000000  00000000  000002f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000083e  00000000  00000000  00000c18  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000384  00000000  00000000  00001456  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d4  00000000  00000000  000017dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000450  00000000  00000000  000018b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001a5  00000000  00000000  00001d00  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001ea5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4c c0       	rjmp	.+152    	; 0xae <__vector_5>
  16:	00 00       	nop
  18:	65 c0       	rjmp	.+202    	; 0xe4 <__vector_6>
  1a:	00 00       	nop
  1c:	8e c0       	rjmp	.+284    	; 0x13a <__vector_7>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a2 30       	cpi	r26, 0x02	; 2
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	7e d0       	rcall	.+252    	; 0x1a6 <main>
  aa:	90 c0       	rjmp	.+288    	; 0x1cc <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <__vector_5>:

void initMotor(void);
unsigned char motor_on_flag, motor_in_flag;

// SW0 - INTERRUPT
SIGNAL(INT4_vect){
  ae:	1f 92       	push	r1
  b0:	0f 92       	push	r0
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	0f 92       	push	r0
  b6:	11 24       	eor	r1, r1
  b8:	8f 93       	push	r24
  ba:	9f 93       	push	r25
	cli();				// another interrupts are not working!
  bc:	f8 94       	cli
	motor_on_flag ^= 0x01;
  be:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <motor_on_flag>
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	89 27       	eor	r24, r25
  c6:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <motor_on_flag>
	// EN: 0 -> OFF, 1 -> ON
	if(motor_on_flag) {
  ca:	88 23       	and	r24, r24
  cc:	11 f0       	breq	.+4      	; 0xd2 <__vector_5+0x24>
		PORTB |= (0x01 << PORTB5);						// EN: 1
  ce:	c5 9a       	sbi	0x18, 5	; 24
  d0:	01 c0       	rjmp	.+2      	; 0xd4 <__vector_5+0x26>
	} else {
		PORTB &= ~(0x01 << PORTB5);						// EN: 0
  d2:	c5 98       	cbi	0x18, 5	; 24
	}
	sei();				// another interrupts are working now!
  d4:	78 94       	sei
}
  d6:	9f 91       	pop	r25
  d8:	8f 91       	pop	r24
  da:	0f 90       	pop	r0
  dc:	0f be       	out	0x3f, r0	; 63
  de:	0f 90       	pop	r0
  e0:	1f 90       	pop	r1
  e2:	18 95       	reti

000000e4 <__vector_6>:

// SW1 - INTERRUPT
SIGNAL(INT5_vect){
  e4:	1f 92       	push	r1
  e6:	0f 92       	push	r0
  e8:	0f b6       	in	r0, 0x3f	; 63
  ea:	0f 92       	push	r0
  ec:	11 24       	eor	r1, r1
  ee:	8f 93       	push	r24
  f0:	9f 93       	push	r25
	cli();
  f2:	f8 94       	cli
	motor_in_flag ^= 0x01;
  f4:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	89 27       	eor	r24, r25
  fc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	// IN: 01 -> RIGHT, 10 -> LEFT
	// flag: 0 -> RIGHT, 1 -> LEFT
	if(motor_in_flag) {
 100:	88 23       	and	r24, r24
 102:	29 f0       	breq	.+10     	; 0x10e <__vector_6+0x2a>
		PORTD &= ~(0x01 << PORTD4 | 0x01 << PORTD5);	// IN: 00
 104:	82 b3       	in	r24, 0x12	; 18
 106:	8f 7c       	andi	r24, 0xCF	; 207
 108:	82 bb       	out	0x12, r24	; 18
		PORTD |= (0x01 << PORTD5);						// IN: 10
 10a:	95 9a       	sbi	0x12, 5	; 18
 10c:	04 c0       	rjmp	.+8      	; 0x116 <__vector_6+0x32>
	} else {
		PORTD &= ~(0x01 << PORTD4 | 0x01 << PORTD5);	// IN: 00
 10e:	82 b3       	in	r24, 0x12	; 18
 110:	8f 7c       	andi	r24, 0xCF	; 207
 112:	82 bb       	out	0x12, r24	; 18
		PORTD |= (0x01 << PORTD4);						// IN: 01
 114:	94 9a       	sbi	0x12, 4	; 18
	}
	sei();
 116:	78 94       	sei
}
 118:	9f 91       	pop	r25
 11a:	8f 91       	pop	r24
 11c:	0f 90       	pop	r0
 11e:	0f be       	out	0x3f, r0	; 63
 120:	0f 90       	pop	r0
 122:	1f 90       	pop	r1
 124:	18 95       	reti

00000126 <initMotor>:
    {
	}
}

void initMotor(void){
	motor_on_flag = 0;
 126:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <motor_on_flag>
	motor_in_flag = 0;
 12a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	PORTB &= ~(0x01 << PORTB5);						// EN: 0
 12e:	c5 98       	cbi	0x18, 5	; 24
	PORTD &= ~(0x01 << PORTD4 | 0x01 << PORTD5);	// IN: 00
 130:	82 b3       	in	r24, 0x12	; 18
 132:	8f 7c       	andi	r24, 0xCF	; 207
 134:	82 bb       	out	0x12, r24	; 18
	PORTD |= (0x01 << PORTD4);						// IN: 01
 136:	94 9a       	sbi	0x12, 4	; 18
 138:	08 95       	ret

0000013a <__vector_7>:
		PORTD |= (0x01 << PORTD4);						// IN: 01
	}
	sei();
}

SIGNAL(INT6_vect){
 13a:	1f 92       	push	r1
 13c:	0f 92       	push	r0
 13e:	0f b6       	in	r0, 0x3f	; 63
 140:	0f 92       	push	r0
 142:	11 24       	eor	r1, r1
 144:	0b b6       	in	r0, 0x3b	; 59
 146:	0f 92       	push	r0
 148:	2f 93       	push	r18
 14a:	3f 93       	push	r19
 14c:	4f 93       	push	r20
 14e:	5f 93       	push	r21
 150:	6f 93       	push	r22
 152:	7f 93       	push	r23
 154:	8f 93       	push	r24
 156:	9f 93       	push	r25
 158:	af 93       	push	r26
 15a:	bf 93       	push	r27
 15c:	ef 93       	push	r30
 15e:	ff 93       	push	r31
	cli();
 160:	f8 94       	cli
	// 11 or 00 - emergency stop
	PORTD ^= (0x01 << PORTD4);
 162:	92 b3       	in	r25, 0x12	; 18
 164:	80 e1       	ldi	r24, 0x10	; 16
 166:	89 27       	eor	r24, r25
 168:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 16a:	23 eb       	ldi	r18, 0xB3	; 179
 16c:	80 e0       	ldi	r24, 0x00	; 0
 16e:	9d e2       	ldi	r25, 0x2D	; 45
 170:	21 50       	subi	r18, 0x01	; 1
 172:	80 40       	sbci	r24, 0x00	; 0
 174:	90 40       	sbci	r25, 0x00	; 0
 176:	e1 f7       	brne	.-8      	; 0x170 <__vector_7+0x36>
 178:	00 c0       	rjmp	.+0      	; 0x17a <__vector_7+0x40>
 17a:	00 00       	nop
	_delay_ms(1000);
	// Reset motor
	initMotor();
 17c:	d4 df       	rcall	.-88     	; 0x126 <initMotor>
	sei();
 17e:	78 94       	sei
}
 180:	ff 91       	pop	r31
 182:	ef 91       	pop	r30
 184:	bf 91       	pop	r27
 186:	af 91       	pop	r26
 188:	9f 91       	pop	r25
 18a:	8f 91       	pop	r24
 18c:	7f 91       	pop	r23
 18e:	6f 91       	pop	r22
 190:	5f 91       	pop	r21
 192:	4f 91       	pop	r20
 194:	3f 91       	pop	r19
 196:	2f 91       	pop	r18
 198:	0f 90       	pop	r0
 19a:	0b be       	out	0x3b, r0	; 59
 19c:	0f 90       	pop	r0
 19e:	0f be       	out	0x3f, r0	; 63
 1a0:	0f 90       	pop	r0
 1a2:	1f 90       	pop	r1
 1a4:	18 95       	reti

000001a6 <main>:


int main(void)
{
	// Set SW0 ~ SW3 Direction to Input
	DDRE &= ~(0x01 << PINE4 | 0x01 << PINE5 | 0x01 << PINE6 | 0x01 << PINE7);
 1a6:	82 b1       	in	r24, 0x02	; 2
 1a8:	8f 70       	andi	r24, 0x0F	; 15
 1aa:	82 b9       	out	0x02, r24	; 2
	// Set MOTOR IN Direction to Output
	DDRD |= (0x01 << PORTD4 | 0x01 << PORTD5);
 1ac:	81 b3       	in	r24, 0x11	; 17
 1ae:	80 63       	ori	r24, 0x30	; 48
 1b0:	81 bb       	out	0x11, r24	; 17
	// Set MOTOR EN Direction to Output
	DDRB |= (0x01 << PORTB5);
 1b2:	bd 9a       	sbi	0x17, 5	; 23
	
	// Set SW0 INTERRUPT Control -> rising edge 00 00 00 11
	// Set SW1 INTERRUPT Control -> rising edge 00 00 11 00
	// Set SW2 INTERRUPT Control -> rising edge 00 11 00 00
	EICRB |= (0x01 | 0x01 << 1 | 0x01 << 2 | 0x01 << 3 | 0x01 << 4 | 0x01 << 5);
 1b4:	8a b7       	in	r24, 0x3a	; 58
 1b6:	8f 63       	ori	r24, 0x3F	; 63
 1b8:	8a bf       	out	0x3a, r24	; 58
	// Set SW0~2 INTERRUPT (INT4~6) Initialize to 0
	EIFR |= (0x01 << PINE4 | 0x01 << PINE5 | 0x01 << PINE6);
 1ba:	88 b7       	in	r24, 0x38	; 56
 1bc:	80 67       	ori	r24, 0x70	; 112
 1be:	88 bf       	out	0x38, r24	; 56
	// Mask INTERRUPT (INT4~6)
	EIMSK |= (0x01 << PINE4 | 0x01 << PINE5 | 0x01 << PINE6);
 1c0:	89 b7       	in	r24, 0x39	; 57
 1c2:	80 67       	ori	r24, 0x70	; 112
 1c4:	89 bf       	out	0x39, r24	; 57
	// Enable INTERRUPT
	sei();
 1c6:	78 94       	sei
	
	initMotor();
 1c8:	ae df       	rcall	.-164    	; 0x126 <initMotor>
 1ca:	ff cf       	rjmp	.-2      	; 0x1ca <main+0x24>

000001cc <_exit>:
 1cc:	f8 94       	cli

000001ce <__stop_program>:
 1ce:	ff cf       	rjmp	.-2      	; 0x1ce <__stop_program>

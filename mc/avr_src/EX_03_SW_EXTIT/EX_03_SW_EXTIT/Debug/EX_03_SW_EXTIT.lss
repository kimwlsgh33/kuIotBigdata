
EX_03_SW_EXTIT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000017e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001f2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001f2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000224  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000918  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000082b  00000000  00000000  00000bac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000354  00000000  00000000  000013d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000064  00000000  00000000  0000172c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000435  00000000  00000000  00001790  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000bf  00000000  00000000  00001bc5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001c84  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4c c0       	rjmp	.+152    	; 0xae <__vector_5>
  16:	00 00       	nop
  18:	62 c0       	rjmp	.+196    	; 0xde <__vector_6>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a2 30       	cpi	r26, 0x02	; 2
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	32 d0       	rcall	.+100    	; 0x10e <main>
  aa:	67 c0       	rjmp	.+206    	; 0x17a <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <__vector_5>:
unsigned char flag_led0 = 0;
unsigned char flag_led1 = 0;

// 4번 인터럽트 발생시, 호출되는 함수
// Interrupt Service Routine (ISR), Event Handler - 반복문 금지 (메인 프로그램으로 넘어가지못함)
SIGNAL(INT4_vect) {
  ae:	1f 92       	push	r1
  b0:	0f 92       	push	r0
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	0f 92       	push	r0
  b6:	11 24       	eor	r1, r1
  b8:	8f 93       	push	r24
	cli();	// 전체 인터럽트 금지 - 인터럽트 처리중에, 중복해서 인터럽트 발생 가능
  ba:	f8 94       	cli
	// CPU 선점 -> 선점형 == CPU 뺏음, AVR: 비선점형
	if(flag_led0 == 0) {
  bc:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <flag_led0>
  c0:	81 11       	cpse	r24, r1
  c2:	04 c0       	rjmp	.+8      	; 0xcc <__vector_5+0x1e>
// 		PORTC |= 0x01;
		flag_led0 = 1;
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <flag_led0>
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__vector_5+0x22>
	} else {
// 		PORTC &= ~0x01; // TODO : 알려주기
		flag_led0 = 0;
  cc:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <flag_led0>
	}
	sei();	// 전체 인터럽트 허용
  d0:	78 94       	sei
}
  d2:	8f 91       	pop	r24
  d4:	0f 90       	pop	r0
  d6:	0f be       	out	0x3f, r0	; 63
  d8:	0f 90       	pop	r0
  da:	1f 90       	pop	r1
  dc:	18 95       	reti

000000de <__vector_6>:

// 5번 인터럽트 발생시, 호출되는 함수
SIGNAL(INT5_vect) {
  de:	1f 92       	push	r1
  e0:	0f 92       	push	r0
  e2:	0f b6       	in	r0, 0x3f	; 63
  e4:	0f 92       	push	r0
  e6:	11 24       	eor	r1, r1
  e8:	8f 93       	push	r24
	cli();
  ea:	f8 94       	cli
	if(flag_led1 == 0) flag_led1 = 1;
  ec:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  f0:	81 11       	cpse	r24, r1
  f2:	04 c0       	rjmp	.+8      	; 0xfc <__vector_6+0x1e>
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
  fa:	02 c0       	rjmp	.+4      	; 0x100 <__vector_6+0x22>
	else flag_led1 = 0;
  fc:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	sei();
 100:	78 94       	sei
}
 102:	8f 91       	pop	r24
 104:	0f 90       	pop	r0
 106:	0f be       	out	0x3f, r0	; 63
 108:	0f 90       	pop	r0
 10a:	1f 90       	pop	r1
 10c:	18 95       	reti

0000010e <main>:
// HAL: Hardware Abstract Level -> 함수를 보면, 좋은 코드를 알수있다.

int main(void)
{
	// SW 0,1
	DDRE &= ~(0x01 << PINE4 | 0x01 << PINE5);
 10e:	82 b1       	in	r24, 0x02	; 2
 110:	8f 7c       	andi	r24, 0xCF	; 207
 112:	82 b9       	out	0x02, r24	; 2
	DDRC |= (0x01 << PORTC0 | 0x01 << PORTC1 | 0x01 << PORTC2 | 0x01 << PORTC3);
 114:	84 b3       	in	r24, 0x14	; 20
 116:	8f 60       	ori	r24, 0x0F	; 15
 118:	84 bb       	out	0x14, r24	; 20
	PORTC &= ~(0x0F);	// init (OFF)
 11a:	85 b3       	in	r24, 0x15	; 21
 11c:	80 7f       	andi	r24, 0xF0	; 240
 11e:	85 bb       	out	0x15, r24	; 21
	
	
	// EXIT4,5 동작 설정 (11 rising edge, 10 falling edge, 00 low level of INTn) 
	EICRB	|= (0x01 << 0 | 0x01 << 1 | 0x01 << 2 | 0x01 << 3);	// External Interrupt Control Register B (to allow 4,5 interrupt separated by 2bits)
 120:	8a b7       	in	r24, 0x3a	; 58
 122:	8f 60       	ori	r24, 0x0F	; 15
 124:	8a bf       	out	0x3a, r24	; 58
	// EXIT4,5 0으로 설정 (0: no interrupt, 1: interrupt)
	EIFR	|= (0x01 << PINE4 | 0x01 << PINE5);					// External Interrupt Flag Register (to clear 4,5)
 126:	88 b7       	in	r24, 0x38	; 56
 128:	80 63       	ori	r24, 0x30	; 48
 12a:	88 bf       	out	0x38, r24	; 56
	// EXIT4,5 Interrupt 기능 활성화
	EIMSK	|= (0x01 << PINE4 | 0x01 << PINE5);					// External Interrupt MaSK register (allow 4)
 12c:	89 b7       	in	r24, 0x39	; 57
 12e:	80 63       	ori	r24, 0x30	; 48
 130:	89 bf       	out	0x39, r24	; 57
	// CPU => Interrupt 개수, 완료 개수 카운트 필요 => Flag Register에 카운트 - 해당 하드웨어가 1로 바꿈, 프로그래머 혹은 MCU가 0으로 바꿈 (인터럽트 여부 확인)
	// 1을 써도 인터럽트가 발생하는 일이 없도록 => 프로그래머는 1로 설정하고, 내부적으로 0으로 바꿔주는 방식을 사용하는게 아닐까? - 추측
	
	sei();				// 전체 인터럽트를 허용		SREG - Status REGister (연산결과값 저장용), 다른 비트 접근차단용 함수사용
 132:	78 94       	sei
	// cli();			// 전체 인터럽트를 클리어
	
	while (1)
    {
		if (flag_led0) PORTC ^= (0x01 << PORTC0); _delay_ms(300);
 134:	91 e0       	ldi	r25, 0x01	; 1
		if (flag_led1) PORTC ^= (0x01 << PORTC1); _delay_ms(500);
 136:	22 e0       	ldi	r18, 0x02	; 2
	sei();				// 전체 인터럽트를 허용		SREG - Status REGister (연산결과값 저장용), 다른 비트 접근차단용 함수사용
	// cli();			// 전체 인터럽트를 클리어
	
	while (1)
    {
		if (flag_led0) PORTC ^= (0x01 << PORTC0); _delay_ms(300);
 138:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <flag_led0>
 13c:	88 23       	and	r24, r24
 13e:	19 f0       	breq	.+6      	; 0x146 <main+0x38>
 140:	85 b3       	in	r24, 0x15	; 21
 142:	89 27       	eor	r24, r25
 144:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 146:	3f ef       	ldi	r19, 0xFF	; 255
 148:	4f e7       	ldi	r20, 0x7F	; 127
 14a:	8d e0       	ldi	r24, 0x0D	; 13
 14c:	31 50       	subi	r19, 0x01	; 1
 14e:	40 40       	sbci	r20, 0x00	; 0
 150:	80 40       	sbci	r24, 0x00	; 0
 152:	e1 f7       	brne	.-8      	; 0x14c <main+0x3e>
 154:	00 c0       	rjmp	.+0      	; 0x156 <main+0x48>
 156:	00 00       	nop
		if (flag_led1) PORTC ^= (0x01 << PORTC1); _delay_ms(500);
 158:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 15c:	88 23       	and	r24, r24
 15e:	19 f0       	breq	.+6      	; 0x166 <main+0x58>
 160:	85 b3       	in	r24, 0x15	; 21
 162:	82 27       	eor	r24, r18
 164:	85 bb       	out	0x15, r24	; 21
 166:	3f ef       	ldi	r19, 0xFF	; 255
 168:	4f e7       	ldi	r20, 0x7F	; 127
 16a:	86 e1       	ldi	r24, 0x16	; 22
 16c:	31 50       	subi	r19, 0x01	; 1
 16e:	40 40       	sbci	r20, 0x00	; 0
 170:	80 40       	sbci	r24, 0x00	; 0
 172:	e1 f7       	brne	.-8      	; 0x16c <main+0x5e>
 174:	00 c0       	rjmp	.+0      	; 0x176 <main+0x68>
 176:	00 00       	nop
 178:	df cf       	rjmp	.-66     	; 0x138 <main+0x2a>

0000017a <_exit>:
 17a:	f8 94       	cli

0000017c <__stop_program>:
 17c:	ff cf       	rjmp	.-2      	; 0x17c <__stop_program>

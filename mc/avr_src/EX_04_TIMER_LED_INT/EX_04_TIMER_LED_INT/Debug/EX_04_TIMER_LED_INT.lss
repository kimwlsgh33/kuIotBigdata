
EX_04_TIMER_LED_INT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000232  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001be  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000232  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000232  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000264  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000002a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000885  00000000  00000000  000002dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000079e  00000000  00000000  00000b61  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000032c  00000000  00000000  000012ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000008c  00000000  00000000  0000162c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000040a  00000000  00000000  000016b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000ce  00000000  00000000  00001ac2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001b90  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	89 c0       	rjmp	.+274    	; 0x138 <__vector_9>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	57 c0       	rjmp	.+174    	; 0xec <__vector_15>
  3e:	00 00       	nop
  40:	36 c0       	rjmp	.+108    	; 0xae <__vector_16>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a2 30       	cpi	r26, 0x02	; 2
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	65 d0       	rcall	.+202    	; 0x174 <main>
  aa:	87 c0       	rjmp	.+270    	; 0x1ba <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <__vector_16>:

volatile unsigned char LED_Data = 0x00;
unsigned char timer0Cnt = 0, timer2Cnt = 0;

// Interrupt Service Routine
SIGNAL(TIMER0_OVF_vect) {
  ae:	1f 92       	push	r1
  b0:	0f 92       	push	r0
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	0f 92       	push	r0
  b6:	11 24       	eor	r1, r1
  b8:	8f 93       	push	r24
  ba:	9f 93       	push	r25
	cli();
  bc:	f8 94       	cli
	TCNT0 = 112;	// Reset Timer Counter -> 0.01 s -> 256 - 144 -> 112
  be:	80 e7       	ldi	r24, 0x70	; 112
  c0:	82 bf       	out	0x32, r24	; 50
	
	++timer0Cnt;
  c2:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <timer0Cnt>
  c6:	8f 5f       	subi	r24, 0xFF	; 255
  c8:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <timer0Cnt>
	
	// 1초마다 실행
	if(timer0Cnt == 100) {
  cc:	84 36       	cpi	r24, 0x64	; 100
  ce:	31 f4       	brne	.+12     	; 0xdc <__vector_16+0x2e>
		PORTC ^= (0x01 << PORTC0);
  d0:	95 b3       	in	r25, 0x15	; 21
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	89 27       	eor	r24, r25
  d6:	85 bb       	out	0x15, r24	; 21
		timer0Cnt = 0;
  d8:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <timer0Cnt>
	}
	
	sei();
  dc:	78 94       	sei
}
  de:	9f 91       	pop	r25
  e0:	8f 91       	pop	r24
  e2:	0f 90       	pop	r0
  e4:	0f be       	out	0x3f, r0	; 63
  e6:	0f 90       	pop	r0
  e8:	1f 90       	pop	r1
  ea:	18 95       	reti

000000ec <__vector_15>:


SIGNAL(TIMER0_COMP_vect) {
  ec:	1f 92       	push	r1
  ee:	0f 92       	push	r0
  f0:	0f b6       	in	r0, 0x3f	; 63
  f2:	0f 92       	push	r0
  f4:	11 24       	eor	r1, r1
  f6:	8f 93       	push	r24
	cli();
  f8:	f8 94       	cli
	TCNT0 = 0;
  fa:	12 be       	out	0x32, r1	; 50
	
	++timer0Cnt;
  fc:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <timer0Cnt>
 100:	8f 5f       	subi	r24, 0xFF	; 255
 102:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <timer0Cnt>
	// 1초마다 실행
// 	if(timer0Cnt == 30) {
// 		PORTC ^= (0x01 << PORTC0);
// 		timer0Cnt = 0;
// 	}
	if(0 <= timer0Cnt && timer0Cnt <= 1) {
 106:	82 30       	cpi	r24, 0x02	; 2
 108:	20 f4       	brcc	.+8      	; 0x112 <__vector_15+0x26>
		PORTC |= (0x01 << PORTC0);
 10a:	85 b3       	in	r24, 0x15	; 21
 10c:	81 60       	ori	r24, 0x01	; 1
 10e:	85 bb       	out	0x15, r24	; 21
 110:	06 c0       	rjmp	.+12     	; 0x11e <__vector_15+0x32>
	} else if (2 <= timer0Cnt && timer0Cnt <= 9) {
 112:	82 50       	subi	r24, 0x02	; 2
 114:	88 30       	cpi	r24, 0x08	; 8
 116:	18 f4       	brcc	.+6      	; 0x11e <__vector_15+0x32>
		PORTC &= ~(0x01 << PORTC0);
 118:	85 b3       	in	r24, 0x15	; 21
 11a:	8e 7f       	andi	r24, 0xFE	; 254
 11c:	85 bb       	out	0x15, r24	; 21
	}
	
	if(timer0Cnt == 9) {
 11e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <timer0Cnt>
 122:	89 30       	cpi	r24, 0x09	; 9
 124:	11 f4       	brne	.+4      	; 0x12a <__vector_15+0x3e>
		timer0Cnt = 0;
 126:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <timer0Cnt>
	}
	
	sei();
 12a:	78 94       	sei
}
 12c:	8f 91       	pop	r24
 12e:	0f 90       	pop	r0
 130:	0f be       	out	0x3f, r0	; 63
 132:	0f 90       	pop	r0
 134:	1f 90       	pop	r1
 136:	18 95       	reti

00000138 <__vector_9>:


SIGNAL(TIMER2_COMP_vect) {
 138:	1f 92       	push	r1
 13a:	0f 92       	push	r0
 13c:	0f b6       	in	r0, 0x3f	; 63
 13e:	0f 92       	push	r0
 140:	11 24       	eor	r1, r1
 142:	8f 93       	push	r24
 144:	9f 93       	push	r25
	cli();
 146:	f8 94       	cli
	TCNT2 = 0;
 148:	14 bc       	out	0x24, r1	; 36
	
	++timer2Cnt;
 14a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 14e:	8f 5f       	subi	r24, 0xFF	; 255
 150:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	
	// 0.5초마다 실행
	if(timer2Cnt == 50) {
 154:	82 33       	cpi	r24, 0x32	; 50
 156:	31 f4       	brne	.+12     	; 0x164 <__vector_9+0x2c>
		PORTC ^= (0x01 << PORTC1);
 158:	95 b3       	in	r25, 0x15	; 21
 15a:	82 e0       	ldi	r24, 0x02	; 2
 15c:	89 27       	eor	r24, r25
 15e:	85 bb       	out	0x15, r24	; 21
		timer2Cnt = 0;
 160:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
	
	sei();
 164:	78 94       	sei
}
 166:	9f 91       	pop	r25
 168:	8f 91       	pop	r24
 16a:	0f 90       	pop	r0
 16c:	0f be       	out	0x3f, r0	; 63
 16e:	0f 90       	pop	r0
 170:	1f 90       	pop	r1
 172:	18 95       	reti

00000174 <main>:


int main(void)
{
    DDRC |= 0x0F;
 174:	84 b3       	in	r24, 0x14	; 20
 176:	8f 60       	ori	r24, 0x0F	; 15
 178:	84 bb       	out	0x14, r24	; 20
	PORTC |= 0x0F;
 17a:	85 b3       	in	r24, 0x15	; 21
 17c:	8f 60       	ori	r24, 0x0F	; 15
 17e:	85 bb       	out	0x15, r24	; 21
	// PORTC &= ~0x0F;
	// PORTC |= (0x01 << PORTC2 | 0x01 << PORTC3);
	
	// Timer Counter Control (F_CPU/1024)
	TCCR0 |= (0x01 | 0x01 << 1 | 0x01 <<2);
 180:	83 b7       	in	r24, 0x33	; 51
 182:	87 60       	ori	r24, 0x07	; 7
 184:	83 bf       	out	0x33, r24	; 51
	//TCNT0 = (256 - 144);		// Overflow interrupt starting count 112 = 256 - 144
	TCNT0 = 0;					// Output Compare interrupt starting count 0
 186:	12 be       	out	0x32, r1	; 50
	// OCR0 = 144 - 1;
	OCR0 = 11 - 1;
 188:	8a e0       	ldi	r24, 0x0A	; 10
 18a:	81 bf       	out	0x31, r24	; 49
	//TIMSK |= 0x01 << TOIE0;	// Timer Interrupt MaSK - Timer Overflow Interrupt Enable
	TIMSK |= 0x01 << OCIE0;		// Timer Output Compare Interrupt Enable
 18c:	87 b7       	in	r24, 0x37	; 55
 18e:	82 60       	ori	r24, 0x02	; 2
 190:	87 bf       	out	0x37, r24	; 55
	TIFR |= 0x01 << OCF0;			// Timer Interrupt Flag - Timer Overflow
 192:	86 b7       	in	r24, 0x36	; 54
 194:	82 60       	ori	r24, 0x02	; 2
 196:	86 bf       	out	0x36, r24	; 54
	
	
	TCCR2 |= (0x01 | 0x01 <<2);	// 1?1
 198:	85 b5       	in	r24, 0x25	; 37
 19a:	85 60       	ori	r24, 0x05	; 5
 19c:	85 bd       	out	0x25, r24	; 37
	TCCR2 &= ~(0x01 << 1);		// 101
 19e:	85 b5       	in	r24, 0x25	; 37
 1a0:	8d 7f       	andi	r24, 0xFD	; 253
 1a2:	85 bd       	out	0x25, r24	; 37
	TCNT2 = 0;
 1a4:	14 bc       	out	0x24, r1	; 36
	OCR2 = 144 - 1;
 1a6:	8f e8       	ldi	r24, 0x8F	; 143
 1a8:	83 bd       	out	0x23, r24	; 35
	
	TIMSK |= 0x01 << OCIE2;
 1aa:	87 b7       	in	r24, 0x37	; 55
 1ac:	80 68       	ori	r24, 0x80	; 128
 1ae:	87 bf       	out	0x37, r24	; 55
	TIFR |= 0x01 << OCF2;
 1b0:	86 b7       	in	r24, 0x36	; 54
 1b2:	80 68       	ori	r24, 0x80	; 128
 1b4:	86 bf       	out	0x36, r24	; 54
	
	
	sei();
 1b6:	78 94       	sei
 1b8:	ff cf       	rjmp	.-2      	; 0x1b8 <main+0x44>

000001ba <_exit>:
 1ba:	f8 94       	cli

000001bc <__stop_program>:
 1bc:	ff cf       	rjmp	.-2      	; 0x1bc <__stop_program>


EX_08_UART0_UART1_INT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004e  00800100  000002ec  00000380  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002ec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000067  0080014e  0080014e  000003ce  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003ce  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000400  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000440  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e61  00000000  00000000  00000508  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009af  00000000  00000000  00001369  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006e2  00000000  00000000  00001d18  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002d4  00000000  00000000  000023fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000536  00000000  00000000  000026d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000075b  00000000  00000000  00002c06  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00003361  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	67 c0       	rjmp	.+206    	; 0x118 <__vector_18>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	79 c0       	rjmp	.+242    	; 0x16c <__vector_30>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec ee       	ldi	r30, 0xEC	; 236
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ae 34       	cpi	r26, 0x4E	; 78
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ae e4       	ldi	r26, 0x4E	; 78
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a5 3b       	cpi	r26, 0xB5	; 181
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	9d d0       	rcall	.+314    	; 0x1fe <main>
  c4:	11 c1       	rjmp	.+546    	; 0x2e8 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <run_command>:
#include "UART.h"

char rx_str[100] = {0};
int i_flag = 0;

void run_command(const char *str) {
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	ec 01       	movw	r28, r24
	if(strcasecmp(str, "LED_ON") == 0) {
  ce:	60 e0       	ldi	r22, 0x00	; 0
  d0:	71 e0       	ldi	r23, 0x01	; 1
  d2:	f7 d0       	rcall	.+494    	; 0x2c2 <strcasecmp>
  d4:	89 2b       	or	r24, r25
  d6:	41 f4       	brne	.+16     	; 0xe8 <run_command+0x20>
		PORTC |= (1 << PORTC0);
  d8:	85 b3       	in	r24, 0x15	; 21
  da:	81 60       	ori	r24, 0x01	; 1
  dc:	85 bb       	out	0x15, r24	; 21
		i_flag = 0;
  de:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <i_flag+0x1>
  e2:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <i_flag>
  e6:	15 c0       	rjmp	.+42     	; 0x112 <run_command+0x4a>
	} else if (strcasecmp(str, "LED_OFF") == 0) {
  e8:	67 e0       	ldi	r22, 0x07	; 7
  ea:	71 e0       	ldi	r23, 0x01	; 1
  ec:	ce 01       	movw	r24, r28
  ee:	e9 d0       	rcall	.+466    	; 0x2c2 <strcasecmp>
  f0:	89 2b       	or	r24, r25
  f2:	41 f4       	brne	.+16     	; 0x104 <run_command+0x3c>
		PORTC &= ~(1 << PORTC0);
  f4:	85 b3       	in	r24, 0x15	; 21
  f6:	8e 7f       	andi	r24, 0xFE	; 254
  f8:	85 bb       	out	0x15, r24	; 21
		i_flag = 0;
  fa:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <i_flag+0x1>
  fe:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <i_flag>
 102:	07 c0       	rjmp	.+14     	; 0x112 <run_command+0x4a>
	} else {
		UART0_print_string("THERE IS NO COMMAND FOR : ");
 104:	8f e0       	ldi	r24, 0x0F	; 15
 106:	91 e0       	ldi	r25, 0x01	; 1
 108:	ab d0       	rcall	.+342    	; 0x260 <UART0_print_string>
		i_flag = 0;
 10a:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <i_flag+0x1>
 10e:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <i_flag>
	}
}
 112:	df 91       	pop	r29
 114:	cf 91       	pop	r28
 116:	08 95       	ret

00000118 <__vector_18>:

SIGNAL(USART0_RX_vect){ // from My PC
 118:	1f 92       	push	r1
 11a:	0f 92       	push	r0
 11c:	0f b6       	in	r0, 0x3f	; 63
 11e:	0f 92       	push	r0
 120:	11 24       	eor	r1, r1
 122:	0b b6       	in	r0, 0x3b	; 59
 124:	0f 92       	push	r0
 126:	2f 93       	push	r18
 128:	3f 93       	push	r19
 12a:	4f 93       	push	r20
 12c:	5f 93       	push	r21
 12e:	6f 93       	push	r22
 130:	7f 93       	push	r23
 132:	8f 93       	push	r24
 134:	9f 93       	push	r25
 136:	af 93       	push	r26
 138:	bf 93       	push	r27
 13a:	ef 93       	push	r30
 13c:	ff 93       	push	r31
	cli();
 13e:	f8 94       	cli
	// unsigned char data = data;
	UART1_transmit(UDR0);
 140:	8c b1       	in	r24, 0x0c	; 12
 142:	b8 d0       	rcall	.+368    	; 0x2b4 <UART1_transmit>
	sei();
 144:	78 94       	sei
}
 146:	ff 91       	pop	r31
 148:	ef 91       	pop	r30
 14a:	bf 91       	pop	r27
 14c:	af 91       	pop	r26
 14e:	9f 91       	pop	r25
 150:	8f 91       	pop	r24
 152:	7f 91       	pop	r23
 154:	6f 91       	pop	r22
 156:	5f 91       	pop	r21
 158:	4f 91       	pop	r20
 15a:	3f 91       	pop	r19
 15c:	2f 91       	pop	r18
 15e:	0f 90       	pop	r0
 160:	0b be       	out	0x3b, r0	; 59
 162:	0f 90       	pop	r0
 164:	0f be       	out	0x3f, r0	; 63
 166:	0f 90       	pop	r0
 168:	1f 90       	pop	r1
 16a:	18 95       	reti

0000016c <__vector_30>:
	
SIGNAL(USART1_RX_vect){ // from MN's MCU
 16c:	1f 92       	push	r1
 16e:	0f 92       	push	r0
 170:	0f b6       	in	r0, 0x3f	; 63
 172:	0f 92       	push	r0
 174:	11 24       	eor	r1, r1
 176:	0b b6       	in	r0, 0x3b	; 59
 178:	0f 92       	push	r0
 17a:	2f 93       	push	r18
 17c:	3f 93       	push	r19
 17e:	4f 93       	push	r20
 180:	5f 93       	push	r21
 182:	6f 93       	push	r22
 184:	7f 93       	push	r23
 186:	8f 93       	push	r24
 188:	9f 93       	push	r25
 18a:	af 93       	push	r26
 18c:	bf 93       	push	r27
 18e:	ef 93       	push	r30
 190:	ff 93       	push	r31
	cli();
 192:	f8 94       	cli
	// unsigned char data = UDR1;
	// UART0_transmit(UDR1);
	
	static unsigned char str_cnt = 0;
	unsigned char data = UDR1;
 194:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
	if (data == '\r' || str_cnt == 99){
 198:	8d 30       	cpi	r24, 0x0D	; 13
 19a:	21 f0       	breq	.+8      	; 0x1a4 <__vector_30+0x38>
 19c:	e0 91 4e 01 	lds	r30, 0x014E	; 0x80014e <__data_end>
 1a0:	e3 36       	cpi	r30, 0x63	; 99
 1a2:	61 f4       	brne	.+24     	; 0x1bc <__vector_30+0x50>
		rx_str[str_cnt] = '\0';
 1a4:	e0 91 4e 01 	lds	r30, 0x014E	; 0x80014e <__data_end>
 1a8:	f0 e0       	ldi	r31, 0x00	; 0
 1aa:	ef 5a       	subi	r30, 0xAF	; 175
 1ac:	fe 4f       	sbci	r31, 0xFE	; 254
 1ae:	10 82       	st	Z, r1
		str_cnt = 0;
 1b0:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__data_end>
		
		run_command(rx_str);
 1b4:	81 e5       	ldi	r24, 0x51	; 81
 1b6:	91 e0       	ldi	r25, 0x01	; 1
 1b8:	87 df       	rcall	.-242    	; 0xc8 <run_command>
 1ba:	09 c0       	rjmp	.+18     	; 0x1ce <__vector_30+0x62>
		// UART0_print_string(rx_str);
	} else {
		rx_str[str_cnt++] = data;
 1bc:	91 e0       	ldi	r25, 0x01	; 1
 1be:	9e 0f       	add	r25, r30
 1c0:	90 93 4e 01 	sts	0x014E, r25	; 0x80014e <__data_end>
 1c4:	f0 e0       	ldi	r31, 0x00	; 0
 1c6:	ef 5a       	subi	r30, 0xAF	; 175
 1c8:	fe 4f       	sbci	r31, 0xFE	; 254
		UART0_transmit(data);
 1ca:	80 83       	st	Z, r24
 1cc:	45 d0       	rcall	.+138    	; 0x258 <UART0_transmit>
	}
	sei();
 1ce:	78 94       	sei
}
 1d0:	ff 91       	pop	r31
 1d2:	ef 91       	pop	r30
 1d4:	bf 91       	pop	r27
 1d6:	af 91       	pop	r26
 1d8:	9f 91       	pop	r25
 1da:	8f 91       	pop	r24
 1dc:	7f 91       	pop	r23
 1de:	6f 91       	pop	r22
 1e0:	5f 91       	pop	r21
 1e2:	4f 91       	pop	r20
 1e4:	3f 91       	pop	r19
 1e6:	2f 91       	pop	r18
 1e8:	0f 90       	pop	r0
 1ea:	0b be       	out	0x3b, r0	; 59
 1ec:	0f 90       	pop	r0
 1ee:	0f be       	out	0x3f, r0	; 63
 1f0:	0f 90       	pop	r0
 1f2:	1f 90       	pop	r1
 1f4:	18 95       	reti

000001f6 <LED_init>:

void LED_init(void) {
	DDRC |= (1 << PORTC0);
 1f6:	84 b3       	in	r24, 0x14	; 20
 1f8:	81 60       	ori	r24, 0x01	; 1
 1fa:	84 bb       	out	0x14, r24	; 20
 1fc:	08 95       	ret

000001fe <main>:
}

int main(void)
{

	LED_init();
 1fe:	fb df       	rcall	.-10     	; 0x1f6 <LED_init>
	
	UART0_init();
 200:	1a d0       	rcall	.+52     	; 0x236 <UART0_init>
 202:	8a b1       	in	r24, 0x0a	; 10
	UCSR0B |= (1 << RXCIE0);
 204:	80 68       	ori	r24, 0x80	; 128
 206:	8a b9       	out	0x0a, r24	; 10
	
	UART1_init();
 208:	40 d0       	rcall	.+128    	; 0x28a <UART1_init>
 20a:	ea e9       	ldi	r30, 0x9A	; 154
	UCSR1B |= (1 << RXCIE1);
 20c:	f0 e0       	ldi	r31, 0x00	; 0
 20e:	80 81       	ld	r24, Z
 210:	80 68       	ori	r24, 0x80	; 128
 212:	80 83       	st	Z, r24
 214:	78 94       	sei
	
	sei();
 216:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <i_flag>
    
    while (1) 
    {
		if(i_flag == 0) {
 21a:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <i_flag+0x1>
 21e:	89 2b       	or	r24, r25
 220:	d1 f7       	brne	.-12     	; 0x216 <main+0x18>
			UART0_print_string("\n\r명령어를 입력하세요. : ");
 222:	8a e2       	ldi	r24, 0x2A	; 42
 224:	91 e0       	ldi	r25, 0x01	; 1
 226:	1c d0       	rcall	.+56     	; 0x260 <UART0_print_string>
 228:	81 e0       	ldi	r24, 0x01	; 1
			i_flag = 1;
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	90 93 50 01 	sts	0x0150, r25	; 0x800150 <i_flag+0x1>
 230:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <i_flag>
 234:	f0 cf       	rjmp	.-32     	; 0x216 <main+0x18>

00000236 <UART0_init>:
 236:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
void UART0_print_float(float f)
{
	char numString[20] = "0.0";
	sprintf(numString, "%f", f);
	UART0_print_string(numString);
}
 23a:	87 e0       	ldi	r24, 0x07	; 7
 23c:	89 b9       	out	0x09, r24	; 9
 23e:	1b b8       	out	0x0b, r1	; 11
 240:	8a b1       	in	r24, 0x0a	; 10
 242:	88 61       	ori	r24, 0x18	; 24
 244:	8a b9       	out	0x0a, r24	; 10
 246:	e5 e9       	ldi	r30, 0x95	; 149
 248:	f0 e0       	ldi	r31, 0x00	; 0
 24a:	80 81       	ld	r24, Z
 24c:	87 78       	andi	r24, 0x87	; 135
 24e:	80 83       	st	Z, r24
 250:	80 81       	ld	r24, Z
 252:	86 60       	ori	r24, 0x06	; 6
 254:	80 83       	st	Z, r24
 256:	08 95       	ret

00000258 <UART0_transmit>:
 258:	5d 9b       	sbis	0x0b, 5	; 11
 25a:	fe cf       	rjmp	.-4      	; 0x258 <UART0_transmit>
 25c:	8c b9       	out	0x0c, r24	; 12
 25e:	08 95       	ret

00000260 <UART0_print_string>:
 260:	0f 93       	push	r16
 262:	1f 93       	push	r17
 264:	cf 93       	push	r28
 266:	df 93       	push	r29
 268:	8c 01       	movw	r16, r24
 26a:	c0 e0       	ldi	r28, 0x00	; 0
 26c:	d0 e0       	ldi	r29, 0x00	; 0
 26e:	02 c0       	rjmp	.+4      	; 0x274 <UART0_print_string+0x14>
 270:	f3 df       	rcall	.-26     	; 0x258 <UART0_transmit>
 272:	21 96       	adiw	r28, 0x01	; 1
 274:	f8 01       	movw	r30, r16
 276:	ec 0f       	add	r30, r28
 278:	fd 1f       	adc	r31, r29
 27a:	80 81       	ld	r24, Z
 27c:	81 11       	cpse	r24, r1
 27e:	f8 cf       	rjmp	.-16     	; 0x270 <UART0_print_string+0x10>
 280:	df 91       	pop	r29
 282:	cf 91       	pop	r28
 284:	1f 91       	pop	r17
 286:	0f 91       	pop	r16
 288:	08 95       	ret

0000028a <UART1_init>:


// UART1
void UART1_init(void)
{
	UBRR1H = 0x00;
 28a:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
	UBRR1L = 7;		// 9,600 bit rate
 28e:	87 e0       	ldi	r24, 0x07	; 7
 290:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
	
	UCSR1A = 0x00;
 294:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
	UCSR1B |= (0x01 << TXEN1 | 0x01 << RXEN1);
 298:	ea e9       	ldi	r30, 0x9A	; 154
 29a:	f0 e0       	ldi	r31, 0x00	; 0
 29c:	80 81       	ld	r24, Z
 29e:	88 61       	ori	r24, 0x18	; 24
 2a0:	80 83       	st	Z, r24
	UCSR1C &= ~(0x01 << UMSEL1 | 0x01 << UPM10 | 0x01 << UPM11 | 0x01 << USBS1);
 2a2:	ed e9       	ldi	r30, 0x9D	; 157
 2a4:	f0 e0       	ldi	r31, 0x00	; 0
 2a6:	80 81       	ld	r24, Z
 2a8:	87 78       	andi	r24, 0x87	; 135
 2aa:	80 83       	st	Z, r24
	UCSR1C |= (0x01 << UCSZ10 | 0x01 << UCSZ11);
 2ac:	80 81       	ld	r24, Z
 2ae:	86 60       	ori	r24, 0x06	; 6
 2b0:	80 83       	st	Z, r24
 2b2:	08 95       	ret

000002b4 <UART1_transmit>:
}

void UART1_transmit(char data)
{
	while(!(UCSR1A & (0x01 << UDRE1)));
 2b4:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
 2b8:	95 ff       	sbrs	r25, 5
 2ba:	fc cf       	rjmp	.-8      	; 0x2b4 <UART1_transmit>
	UDR1 = data;
 2bc:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
 2c0:	08 95       	ret

000002c2 <strcasecmp>:
 2c2:	fb 01       	movw	r30, r22
 2c4:	dc 01       	movw	r26, r24
 2c6:	8d 91       	ld	r24, X+
 2c8:	81 34       	cpi	r24, 0x41	; 65
 2ca:	1c f0       	brlt	.+6      	; 0x2d2 <strcasecmp+0x10>
 2cc:	8b 35       	cpi	r24, 0x5B	; 91
 2ce:	0c f4       	brge	.+2      	; 0x2d2 <strcasecmp+0x10>
 2d0:	80 5e       	subi	r24, 0xE0	; 224
 2d2:	61 91       	ld	r22, Z+
 2d4:	61 34       	cpi	r22, 0x41	; 65
 2d6:	1c f0       	brlt	.+6      	; 0x2de <strcasecmp+0x1c>
 2d8:	6b 35       	cpi	r22, 0x5B	; 91
 2da:	0c f4       	brge	.+2      	; 0x2de <strcasecmp+0x1c>
 2dc:	60 5e       	subi	r22, 0xE0	; 224
 2de:	86 1b       	sub	r24, r22
 2e0:	61 11       	cpse	r22, r1
 2e2:	89 f3       	breq	.-30     	; 0x2c6 <strcasecmp+0x4>
 2e4:	99 0b       	sbc	r25, r25
 2e6:	08 95       	ret

000002e8 <_exit>:
 2e8:	f8 94       	cli

000002ea <__stop_program>:
 2ea:	ff cf       	rjmp	.-2      	; 0x2ea <__stop_program>

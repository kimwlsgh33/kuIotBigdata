
EX_06_UART_hello.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000038  00800100  00000170  000001e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000170  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000024c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  0000028c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000094b  00000000  00000000  000002cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000086e  00000000  00000000  00000c17  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002e1  00000000  00000000  00001485  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000088  00000000  00000000  00001768  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f5  00000000  00000000  000017f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000ea  00000000  00000000  00001be5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001ccf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e7       	ldi	r30, 0x70	; 112
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 33       	cpi	r26, 0x38	; 56
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	30 d0       	rcall	.+96     	; 0x114 <main>
  b4:	5b c0       	rjmp	.+182    	; 0x16c <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <putch>:
#define F_CPU 14745600
#include <avr/io.h>

void putch(unsigned char ch) {
	// Data Register Empty (Empty: 0)
	while((UCSR0A & (0x01 << UDRE0)) == 0);	// Data Register 사용가능 신호대기
  b8:	5d 9b       	sbis	0x0b, 5	; 11
  ba:	fe cf       	rjmp	.-4      	; 0xb8 <putch>
	UDR0 = ch;							// 데이터를 UDR0 buffer에 쓰고, 전송
  bc:	8c b9       	out	0x0c, r24	; 12
  be:	08 95       	ret

000000c0 <getch>:

unsigned char getch() {
	// 8 bit buffer
	unsigned char ch;
	// Receive Complete
	while((UCSR0A & (0x01 << RXC0)) == 0);
  c0:	5f 9b       	sbis	0x0b, 7	; 11
  c2:	fe cf       	rjmp	.-4      	; 0xc0 <getch>
	ch = UDR0; // write data to buffer
  c4:	8c b1       	in	r24, 0x0c	; 12
	// UCSR0A |= 0x01 << RXC0;
	return ch;
}
  c6:	08 95       	ret

000000c8 <putstr>:

void putstr(const unsigned char *str){
  c8:	0f 93       	push	r16
  ca:	1f 93       	push	r17
  cc:	cf 93       	push	r28
  ce:	df 93       	push	r29
  d0:	8c 01       	movw	r16, r24
	unsigned int i = 0;
  d2:	c0 e0       	ldi	r28, 0x00	; 0
  d4:	d0 e0       	ldi	r29, 0x00	; 0
	while (str[i] != '\0')
  d6:	02 c0       	rjmp	.+4      	; 0xdc <putstr+0x14>
	{
		putch(str[i++]);
  d8:	21 96       	adiw	r28, 0x01	; 1
  da:	ee df       	rcall	.-36     	; 0xb8 <putch>
	return ch;
}

void putstr(const unsigned char *str){
	unsigned int i = 0;
	while (str[i] != '\0')
  dc:	f8 01       	movw	r30, r16
  de:	ec 0f       	add	r30, r28
  e0:	fd 1f       	adc	r31, r29
  e2:	80 81       	ld	r24, Z
  e4:	81 11       	cpse	r24, r1
  e6:	f8 cf       	rjmp	.-16     	; 0xd8 <putstr+0x10>
	{
		putch(str[i++]);
	}
}
  e8:	df 91       	pop	r29
  ea:	cf 91       	pop	r28
  ec:	1f 91       	pop	r17
  ee:	0f 91       	pop	r16
  f0:	08 95       	ret

000000f2 <init_uart0>:

void init_uart0(void) {
	// Control & Status
	UCSR0A = 0x00;
  f2:	1b b8       	out	0x0b, r1	; 11
	
	// UCSR0B = 0x18;	// Enable Rx, Tx
	UCSR0B |= (0x01 << RXEN0 | 0x01 << TXEN0);
  f4:	8a b1       	in	r24, 0x0a	; 10
  f6:	88 61       	ori	r24, 0x18	; 24
  f8:	8a b9       	out	0x0a, r24	; 10
	// SBS: Stop Bit Select
	// CSZ: Character SiZe
	// CPOL: Clock POLarity
	
	// UCSR0C = 0x06;	// Databit: 8, no parity, 1 stop bit --> 8-N-1
	UCSR0C &= ~(0x01 << UMSEL0 | 0x01 << UPM00 | 0x01 << UPM01 | 0x01 << USBS0 | 0x01 << UCSZ02 | 0x01 << UCPOL0);
  fa:	e5 e9       	ldi	r30, 0x95	; 149
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	80 81       	ld	r24, Z
 100:	82 78       	andi	r24, 0x82	; 130
 102:	80 83       	st	Z, r24
	UCSR0C |= (0x01 << UCSZ00 | 0x01 << UCSZ01);
 104:	80 81       	ld	r24, Z
 106:	86 60       	ori	r24, 0x06	; 6
 108:	80 83       	st	Z, r24
	
	// Baud Rate - How many symbols can be transmitted per second.
	UBRR0H = 0x00;
 10a:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = 0x07;	// 115200 bps
 10e:	87 e0       	ldi	r24, 0x07	; 7
 110:	89 b9       	out	0x09, r24	; 9
 112:	08 95       	ret

00000114 <main>:
}

// 기존인원이 그만둬서 뽑는거냐, 회사 규모가 커져서 뽑는거냐

int main(void)
{
 114:	cf 93       	push	r28
 116:	df 93       	push	r29
 118:	cd b7       	in	r28, 0x3d	; 61
 11a:	de b7       	in	r29, 0x3e	; 62
 11c:	e7 97       	sbiw	r28, 0x37	; 55
 11e:	0f b6       	in	r0, 0x3f	; 63
 120:	f8 94       	cli
 122:	de bf       	out	0x3e, r29	; 62
 124:	0f be       	out	0x3f, r0	; 63
 126:	cd bf       	out	0x3d, r28	; 61
    unsigned char text[] = "\r\nWelcome! edgeiLAB\r\n USART 0 Test Program.\r\n";
 128:	8e e2       	ldi	r24, 0x2E	; 46
 12a:	e0 e0       	ldi	r30, 0x00	; 0
 12c:	f1 e0       	ldi	r31, 0x01	; 1
 12e:	de 01       	movw	r26, r28
 130:	11 96       	adiw	r26, 0x01	; 1
 132:	01 90       	ld	r0, Z+
 134:	0d 92       	st	X+, r0
 136:	8a 95       	dec	r24
 138:	e1 f7       	brne	.-8      	; 0x132 <main+0x1e>
	unsigned char echo[]  = "ECHO >> ";
 13a:	89 e0       	ldi	r24, 0x09	; 9
 13c:	ee e2       	ldi	r30, 0x2E	; 46
 13e:	f1 e0       	ldi	r31, 0x01	; 1
 140:	de 01       	movw	r26, r28
 142:	9f 96       	adiw	r26, 0x2f	; 47
 144:	01 90       	ld	r0, Z+
 146:	0d 92       	st	X+, r0
 148:	8a 95       	dec	r24
 14a:	e1 f7       	brne	.-8      	; 0x144 <main+0x30>
    
	// Set UART direction
	DDRE &= ~(0x01 << PORTE0);
 14c:	82 b1       	in	r24, 0x02	; 2
 14e:	8e 7f       	andi	r24, 0xFE	; 254
 150:	82 b9       	out	0x02, r24	; 2
	DDRE |= (0x01 << PORTE1);
 152:	82 b1       	in	r24, 0x02	; 2
 154:	82 60       	ori	r24, 0x02	; 2
 156:	82 b9       	out	0x02, r24	; 2
	
	init_uart0();
 158:	cc df       	rcall	.-104    	; 0xf2 <init_uart0>
	
	putstr(text);
 15a:	ce 01       	movw	r24, r28
 15c:	01 96       	adiw	r24, 0x01	; 1
 15e:	b4 df       	rcall	.-152    	; 0xc8 <putstr>
	putstr(echo);
 160:	ce 01       	movw	r24, r28
 162:	8f 96       	adiw	r24, 0x2f	; 47
	
	// echo all received data
	while(1) {
		putch(getch());
 164:	b1 df       	rcall	.-158    	; 0xc8 <putstr>
 166:	ac df       	rcall	.-168    	; 0xc0 <getch>
 168:	a7 df       	rcall	.-178    	; 0xb8 <putch>
 16a:	fd cf       	rjmp	.-6      	; 0x166 <main+0x52>

0000016c <_exit>:
 16c:	f8 94       	cli

0000016e <__stop_program>:
 16e:	ff cf       	rjmp	.-2      	; 0x16e <__stop_program>

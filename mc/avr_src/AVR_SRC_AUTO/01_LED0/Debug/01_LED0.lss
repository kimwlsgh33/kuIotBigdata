
01_LED0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000198  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000144  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001c8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000010a9  00000000  00000000  00000268  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000910  00000000  00000000  00001311  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003b2  00000000  00000000  00001c21  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000006c  00000000  00000000  00001fd4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005f8  00000000  00000000  00002040  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002d6  00000000  00000000  00002638  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  0000290e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	04 d0       	rcall	.+8      	; 0xa2 <main>
  9a:	52 c0       	rjmp	.+164    	; 0x140 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
  9e:	03 c0       	rjmp	.+6      	; 0xa6 <system_init>
  a0:	08 95       	ret

000000a2 <main>:
#include <atmel_start.h>

int main(void)
{
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
  a2:	fd df       	rcall	.-6      	; 0x9e <atmel_start_init>
  a4:	ff cf       	rjmp	.-2      	; 0xa4 <main+0x2>

000000a6 <system_init>:
		break;
	case PORT_DIR_OUT:
		DDRA |= mask;
		break;
	case PORT_DIR_OFF:
		DDRA &= ~mask;
  a6:	8a b3       	in	r24, 0x1a	; 26
  a8:	1a ba       	out	0x1a, r1	; 26

		PORTA |= mask;
  aa:	8b b3       	in	r24, 0x1b	; 27
  ac:	8f ef       	ldi	r24, 0xFF	; 255
  ae:	8b bb       	out	0x1b, r24	; 27
		break;
	case PORT_DIR_OUT:
		DDRB |= mask;
		break;
	case PORT_DIR_OFF:
		DDRB &= ~mask;
  b0:	97 b3       	in	r25, 0x17	; 23
  b2:	17 ba       	out	0x17, r1	; 23

		PORTB |= mask;
  b4:	98 b3       	in	r25, 0x18	; 24
  b6:	88 bb       	out	0x18, r24	; 24
		break;
	case PORT_DIR_OUT:
		DDRC |= mask;
		break;
	case PORT_DIR_OFF:
		DDRC &= ~mask;
  b8:	94 b3       	in	r25, 0x14	; 20
  ba:	14 ba       	out	0x14, r1	; 20

		PORTC |= mask;
  bc:	95 b3       	in	r25, 0x15	; 21
  be:	85 bb       	out	0x15, r24	; 21
		break;
	case PORT_DIR_OUT:
		DDRD |= mask;
		break;
	case PORT_DIR_OFF:
		DDRD &= ~mask;
  c0:	91 b3       	in	r25, 0x11	; 17
  c2:	11 ba       	out	0x11, r1	; 17

		PORTD |= mask;
  c4:	92 b3       	in	r25, 0x12	; 18
  c6:	82 bb       	out	0x12, r24	; 18
		break;
	case PORT_DIR_OUT:
		DDRE |= mask;
		break;
	case PORT_DIR_OFF:
		DDRE &= ~mask;
  c8:	92 b1       	in	r25, 0x02	; 2
  ca:	12 b8       	out	0x02, r1	; 2

		PORTE |= mask;
  cc:	93 b1       	in	r25, 0x03	; 3
  ce:	83 b9       	out	0x03, r24	; 3
		break;
	case PORT_DIR_OUT:
		DDRF |= mask;
		break;
	case PORT_DIR_OFF:
		DDRF &= ~mask;
  d0:	e1 e6       	ldi	r30, 0x61	; 97
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	90 81       	ld	r25, Z
  d6:	10 82       	st	Z, r1

		PORTF |= mask;
  d8:	e2 e6       	ldi	r30, 0x62	; 98
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	90 81       	ld	r25, Z
  de:	80 83       	st	Z, r24
		break;
	case PORT_DIR_OUT:
		DDRG |= mask;
		break;
	case PORT_DIR_OFF:
		DDRG &= ~mask;
  e0:	e4 e6       	ldi	r30, 0x64	; 100
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	80 81       	ld	r24, Z
  e6:	80 7e       	andi	r24, 0xE0	; 224
  e8:	80 83       	st	Z, r24

		PORTG |= mask;
  ea:	e5 e6       	ldi	r30, 0x65	; 101
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 81       	ld	r24, Z
  f0:	8f 61       	ori	r24, 0x1F	; 31
  f2:	80 83       	st	Z, r24
	switch (direction) {
	case PORT_DIR_IN:
		DDRC &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRC |= 1 << pin;
  f4:	84 b3       	in	r24, 0x14	; 20
  f6:	81 60       	ori	r24, 0x01	; 1
  f8:	84 bb       	out	0x14, r24	; 20
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTC |= 1 << pin;
	} else {
		PORTC &= ~(1 << pin);
  fa:	85 b3       	in	r24, 0x15	; 21
  fc:	8e 7f       	andi	r24, 0xFE	; 254
  fe:	85 bb       	out	0x15, r24	; 21
	switch (direction) {
	case PORT_DIR_IN:
		DDRC &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRC |= 1 << pin;
 100:	84 b3       	in	r24, 0x14	; 20
 102:	82 60       	ori	r24, 0x02	; 2
 104:	84 bb       	out	0x14, r24	; 20
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTC |= 1 << pin;
	} else {
		PORTC &= ~(1 << pin);
 106:	85 b3       	in	r24, 0x15	; 21
 108:	8d 7f       	andi	r24, 0xFD	; 253
 10a:	85 bb       	out	0x15, r24	; 21
	switch (direction) {
	case PORT_DIR_IN:
		DDRC &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRC |= 1 << pin;
 10c:	84 b3       	in	r24, 0x14	; 20
 10e:	84 60       	ori	r24, 0x04	; 4
 110:	84 bb       	out	0x14, r24	; 20
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTC |= 1 << pin;
	} else {
		PORTC &= ~(1 << pin);
 112:	85 b3       	in	r24, 0x15	; 21
 114:	8b 7f       	andi	r24, 0xFB	; 251
 116:	85 bb       	out	0x15, r24	; 21
	switch (direction) {
	case PORT_DIR_IN:
		DDRC &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRC |= 1 << pin;
 118:	84 b3       	in	r24, 0x14	; 20
 11a:	88 60       	ori	r24, 0x08	; 8
 11c:	84 bb       	out	0x14, r24	; 20
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTC |= 1 << pin;
	} else {
		PORTC &= ~(1 << pin);
 11e:	85 b3       	in	r24, 0x15	; 21
 120:	87 7f       	andi	r24, 0xF7	; 247
 122:	85 bb       	out	0x15, r24	; 21
 */
static inline void PORTE_set_pin_dir(const uint8_t pin, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRE &= ~(1 << pin);
 124:	82 b1       	in	r24, 0x02	; 2
 126:	8f 7e       	andi	r24, 0xEF	; 239
 128:	82 b9       	out	0x02, r24	; 2
		DDRE &= ~(1 << pin);

		PORTE |= 1 << pin;
	} else if (pull_mode == PORT_PULL_OFF) {

		PORTE &= ~(1 << pin);
 12a:	83 b1       	in	r24, 0x03	; 3
 12c:	8f 7e       	andi	r24, 0xEF	; 239
 12e:	83 b9       	out	0x03, r24	; 3
 */
static inline void PORTE_set_pin_dir(const uint8_t pin, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRE &= ~(1 << pin);
 130:	82 b1       	in	r24, 0x02	; 2
 132:	8f 7d       	andi	r24, 0xDF	; 223
 134:	82 b9       	out	0x02, r24	; 2
		DDRE &= ~(1 << pin);

		PORTE |= 1 << pin;
	} else if (pull_mode == PORT_PULL_OFF) {

		PORTE &= ~(1 << pin);
 136:	83 b1       	in	r24, 0x03	; 3
 138:	8f 7d       	andi	r24, 0xDF	; 223
 13a:	83 b9       	out	0x03, r24	; 3
 * \return Initialization status.
 */
static inline int8_t sysctrl_init()
{

	MCUCR = (0 << SM2) | (0 << SM1) | (0 << SM0) | // Idle
 13c:	15 be       	out	0x35, r1	; 53
 13e:	08 95       	ret

00000140 <_exit>:
 140:	f8 94       	cli

00000142 <__stop_program>:
 142:	ff cf       	rjmp	.-2      	; 0x142 <__stop_program>

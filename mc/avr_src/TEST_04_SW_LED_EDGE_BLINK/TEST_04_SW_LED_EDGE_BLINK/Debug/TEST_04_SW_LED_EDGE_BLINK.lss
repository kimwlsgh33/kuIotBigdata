
TEST_04_SW_LED_EDGE_BLINK.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000154  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001d8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000918  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007fb  00000000  00000000  00000b50  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000349  00000000  00000000  0000134b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001694  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000455  00000000  00000000  000016b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001bd  00000000  00000000  00001b0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001cca  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	5a c0       	rjmp	.+180    	; 0x150 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:
	
	unsigned char pre_sw0 = 0, cur_sw0 = 0;
	unsigned char pre_sw1 = 0, cur_sw1 = 0;
	
	// setup
	DDRE &= ~0xF0;	// 스위치 입력 설정
  9e:	82 b1       	in	r24, 0x02	; 2
  a0:	8f 70       	andi	r24, 0x0F	; 15
  a2:	82 b9       	out	0x02, r24	; 2
	//DDRE &= ~( (0x01<<DDRE7)|(0x01<<DDRE6)|(0x01<<DDRE5)|(0x01<<DDRE4) );
	DDRC |= 0x0F;	// LED 출력 설정
  a4:	84 b3       	in	r24, 0x14	; 20
  a6:	8f 60       	ori	r24, 0x0F	; 15
  a8:	84 bb       	out	0x14, r24	; 20
	//DDRC |= (0x01<<DDRE3)|(0x01<<DDRE2)|(0x01<<DDRE1)|(0x01<<DDRE0);
	
	// init(초기화)
	PORTC &= ~0x03;
  aa:	85 b3       	in	r24, 0x15	; 21
  ac:	8c 7f       	andi	r24, 0xFC	; 252
  ae:	85 bb       	out	0x15, r24	; 21
{
	unsigned char flag_led0 = 0;  // 0:OFF, 1:ON
	unsigned char flag_led1 = 0;  // 0:OFF, 1:ON
	
	unsigned char pre_sw0 = 0, cur_sw0 = 0;
	unsigned char pre_sw1 = 0, cur_sw1 = 0;
  b0:	20 e0       	ldi	r18, 0x00	; 0
int main(void)
{
	unsigned char flag_led0 = 0;  // 0:OFF, 1:ON
	unsigned char flag_led1 = 0;  // 0:OFF, 1:ON
	
	unsigned char pre_sw0 = 0, cur_sw0 = 0;
  b2:	70 e0       	ldi	r23, 0x00	; 0
#include <util/delay.h>

int main(void)
{
	unsigned char flag_led0 = 0;  // 0:OFF, 1:ON
	unsigned char flag_led1 = 0;  // 0:OFF, 1:ON
  b4:	90 e0       	ldi	r25, 0x00	; 0
#include <avr/io.h>
#include <util/delay.h>

int main(void)
{
	unsigned char flag_led0 = 0;  // 0:OFF, 1:ON
  b6:	80 e0       	ldi	r24, 0x00	; 0
	PORTC &= ~0x03;

	while (1)
	{
		// 현재값을 갱신
		cur_sw0 = (PINE & 0x10)? 1:0;
  b8:	61 e0       	ldi	r22, 0x01	; 1
// 			_delay_ms(300);
		}

		if(flag_led1 == 0) PORTC &= ~0x02;
		else {
			PORTC ^= 0x02;
  ba:	f2 e0       	ldi	r31, 0x02	; 2
	PORTC &= ~0x03;

	while (1)
	{
		// 현재값을 갱신
		cur_sw0 = (PINE & 0x10)? 1:0;
  bc:	31 b1       	in	r19, 0x01	; 1
  be:	41 e0       	ldi	r20, 0x01	; 1
  c0:	a3 2f       	mov	r26, r19
  c2:	a0 71       	andi	r26, 0x10	; 16
  c4:	34 ff       	sbrs	r19, 4
  c6:	40 e0       	ldi	r20, 0x00	; 0
		cur_sw1 = (PINE & 0x20)? 1:0;
  c8:	e1 b1       	in	r30, 0x01	; 1
  ca:	51 e0       	ldi	r21, 0x01	; 1
  cc:	3e 2f       	mov	r19, r30
  ce:	30 72       	andi	r19, 0x20	; 32
  d0:	e5 ff       	sbrs	r30, 5
  d2:	50 e0       	ldi	r21, 0x00	; 0
		
		//SW0 체크
		if( (pre_sw0 == 0) && (cur_sw0 == 1) ){
  d4:	71 11       	cpse	r23, r1
  d6:	05 c0       	rjmp	.+10     	; 0xe2 <main+0x44>
  d8:	aa 23       	and	r26, r26
  da:	19 f0       	breq	.+6      	; 0xe2 <main+0x44>
			if( flag_led0 == 0){	// 꺼져있으면
  dc:	88 23       	and	r24, r24
  de:	89 f0       	breq	.+34     	; 0x102 <main+0x64>
  e0:	05 c0       	rjmp	.+10     	; 0xec <main+0x4e>
				
				flag_led0 = 0;		// 상태값 변경
			}
		}
		//SW1 체크
		if( (pre_sw1 == 0) && (cur_sw1 == 1) ){
  e2:	21 11       	cpse	r18, r1
  e4:	09 c0       	rjmp	.+18     	; 0xf8 <main+0x5a>
  e6:	31 11       	cpse	r19, r1
  e8:	06 c0       	rjmp	.+12     	; 0xf6 <main+0x58>
  ea:	06 c0       	rjmp	.+12     	; 0xf8 <main+0x5a>
  ec:	21 11       	cpse	r18, r1
  ee:	06 c0       	rjmp	.+12     	; 0xfc <main+0x5e>
  f0:	33 23       	and	r19, r19
  f2:	21 f0       	breq	.+8      	; 0xfc <main+0x5e>
				
				flag_led0 = 1;		// 상태값 변경
			}
			else{					// 켜져있으면
				
				flag_led0 = 0;		// 상태값 변경
  f4:	80 e0       	ldi	r24, 0x00	; 0
  f6:	96 27       	eor	r25, r22
				flag_led1 = 0;
			}
		}
		
		
		if(flag_led0 == 0) PORTC &= ~0x01;		// 상태값에 따른 동작 구현
  f8:	81 11       	cpse	r24, r1
  fa:	05 c0       	rjmp	.+10     	; 0x106 <main+0x68>
  fc:	a8 98       	cbi	0x15, 0	; 21
  fe:	80 e0       	ldi	r24, 0x00	; 0
 100:	0f c0       	rjmp	.+30     	; 0x120 <main+0x82>
				
				flag_led0 = 0;		// 상태값 변경
			}
		}
		//SW1 체크
		if( (pre_sw1 == 0) && (cur_sw1 == 1) ){
 102:	22 23       	and	r18, r18
 104:	09 f1       	breq	.+66     	; 0x148 <main+0xaa>
		}
		
		
		if(flag_led0 == 0) PORTC &= ~0x01;		// 상태값에 따른 동작 구현
		else {
			PORTC ^= 0x01;						// 상태값에 따른 동작 구현
 106:	85 b3       	in	r24, 0x15	; 21
 108:	86 27       	eor	r24, r22
 10a:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10c:	2f ef       	ldi	r18, 0xFF	; 255
 10e:	3f e7       	ldi	r19, 0x7F	; 127
 110:	84 e0       	ldi	r24, 0x04	; 4
 112:	21 50       	subi	r18, 0x01	; 1
 114:	30 40       	sbci	r19, 0x00	; 0
 116:	80 40       	sbci	r24, 0x00	; 0
 118:	e1 f7       	brne	.-8      	; 0x112 <main+0x74>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <main+0x7e>
 11c:	00 00       	nop
 11e:	81 e0       	ldi	r24, 0x01	; 1
			_delay_ms(100);
// 			PORTC &= ~0x01;
// 			_delay_ms(300);
		}

		if(flag_led1 == 0) PORTC &= ~0x02;
 120:	91 11       	cpse	r25, r1
 122:	04 c0       	rjmp	.+8      	; 0x12c <main+0x8e>
 124:	a9 98       	cbi	0x15, 1	; 21
 126:	25 2f       	mov	r18, r21
 128:	74 2f       	mov	r23, r20
 12a:	c8 cf       	rjmp	.-112    	; 0xbc <main+0x1e>
		else {
			PORTC ^= 0x02;
 12c:	95 b3       	in	r25, 0x15	; 21
 12e:	9f 27       	eor	r25, r31
 130:	95 bb       	out	0x15, r25	; 21
 132:	9f ef       	ldi	r25, 0xFF	; 255
 134:	2f e7       	ldi	r18, 0x7F	; 127
 136:	34 e0       	ldi	r19, 0x04	; 4
 138:	91 50       	subi	r25, 0x01	; 1
 13a:	20 40       	sbci	r18, 0x00	; 0
 13c:	30 40       	sbci	r19, 0x00	; 0
 13e:	e1 f7       	brne	.-8      	; 0x138 <main+0x9a>
 140:	00 c0       	rjmp	.+0      	; 0x142 <main+0xa4>
 142:	00 00       	nop
 144:	91 e0       	ldi	r25, 0x01	; 1
 146:	ef cf       	rjmp	.-34     	; 0x126 <main+0x88>
				
				flag_led0 = 0;		// 상태값 변경
			}
		}
		//SW1 체크
		if( (pre_sw1 == 0) && (cur_sw1 == 1) ){
 148:	33 23       	and	r19, r19
 14a:	e9 f2       	breq	.-70     	; 0x106 <main+0x68>
		
		//SW0 체크
		if( (pre_sw0 == 0) && (cur_sw0 == 1) ){
			if( flag_led0 == 0){	// 꺼져있으면
				
				flag_led0 = 1;		// 상태값 변경
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	d3 cf       	rjmp	.-90     	; 0xf6 <main+0x58>

00000150 <_exit>:
 150:	f8 94       	cli

00000152 <__stop_program>:
 152:	ff cf       	rjmp	.-2      	; 0x152 <__stop_program>

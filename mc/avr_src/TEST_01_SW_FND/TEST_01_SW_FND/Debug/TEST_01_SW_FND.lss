
TEST_01_SW_FND.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000130  000001a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000130  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001e4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000850  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007af  00000000  00000000  00000a94  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000026b  00000000  00000000  00001243  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000014b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ce  00000000  00000000  000014e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000bf  00000000  00000000  000018b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001971  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e3       	ldi	r30, 0x30	; 48
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 31       	cpi	r26, 0x10	; 16
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	02 d0       	rcall	.+4      	; 0xb8 <main>
  b4:	3b c0       	rjmp	.+118    	; 0x12c <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <main>:
#define F_CPU	14745600L
#include <avr/io.h>


int main(void)
{
  b8:	cf 93       	push	r28
  ba:	df 93       	push	r29
  bc:	cd b7       	in	r28, 0x3d	; 61
  be:	de b7       	in	r29, 0x3e	; 62
  c0:	60 97       	sbiw	r28, 0x10	; 16
  c2:	0f b6       	in	r0, 0x3f	; 63
  c4:	f8 94       	cli
  c6:	de bf       	out	0x3e, r29	; 62
  c8:	0f be       	out	0x3f, r0	; 63
  ca:	cd bf       	out	0x3d, r28	; 61
	// SW0, SW1, SW2 -> 0 (input)
	DDRE &= ~(0x01 << DDRE4 | 0x01 << DDRE5 | 0x01 << DDRE6);
  cc:	82 b1       	in	r24, 0x02	; 2
  ce:	8f 78       	andi	r24, 0x8F	; 143
  d0:	82 b9       	out	0x02, r24	; 2
	// FND0 ~ FND7 -> 1 (output)
	// DDRA = (0x01 << DDRA0 | 0x01 << DDRA1 | 0x01 << DDRA2 | 0x01 << DDRA3 | 0x01 << DDRA4 | 0x01 << DDRA5 | 0x01 << DDRA6 | 0x01 << DDRA7);
	DDRA = 0xFF;
  d2:	8f ef       	ldi	r24, 0xFF	; 255
  d4:	8a bb       	out	0x1a, r24	; 26
	// DDRD |= (0x01 << DDRD4 | 0x01 << DDRD5);

	unsigned char fnd[] = {
  d6:	80 e1       	ldi	r24, 0x10	; 16
  d8:	e0 e0       	ldi	r30, 0x00	; 0
  da:	f1 e0       	ldi	r31, 0x01	; 1
  dc:	de 01       	movw	r26, r28
  de:	11 96       	adiw	r26, 0x01	; 1
  e0:	01 90       	ld	r0, Z+
  e2:	0d 92       	st	X+, r0
  e4:	8a 95       	dec	r24
  e6:	e1 f7       	brne	.-8      	; 0xe0 <main+0x28>
		0X3F,0X06,0X5B,0X4F,0X66,0X6D,
		0X7C,0X07,0X7F,0X67,0X77,0X7C,
		0X39,0X5E,0X79,0X71
	};

	PORTA = fnd[0]; // 0 출력
  e8:	8f e3       	ldi	r24, 0x3F	; 63
  ea:	8b bb       	out	0x1b, r24	; 27
	unsigned char cnt = 0;
	unsigned char prev = 0;
  ec:	90 e0       	ldi	r25, 0x00	; 0
		0X7C,0X07,0X7F,0X67,0X77,0X7C,
		0X39,0X5E,0X79,0X71
	};

	PORTA = fnd[0]; // 0 출력
	unsigned char cnt = 0;
  ee:	80 e0       	ldi	r24, 0x00	; 0
	
    while (1) 
    {
		// PORTA = FND[cnt];
		// SW0 == true
		if (PINE & (0x01 << PINE4)) {
  f0:	0c 9b       	sbis	0x01, 4	; 1
  f2:	07 c0       	rjmp	.+14     	; 0x102 <main+0x4a>
// 			} else {
// 				cnt = 0;
// 			}

			// 처음 누르는 경우
			if(!prev) {
  f4:	91 11       	cpse	r25, r1
  f6:	01 c0       	rjmp	.+2      	; 0xfa <main+0x42>
				cnt++;
  f8:	8f 5f       	subi	r24, 0xFF	; 255
				prev = 1; // 누르고 있다
			}
			if (cnt > 15) cnt = 0;
  fa:	80 31       	cpi	r24, 0x10	; 16
  fc:	38 f0       	brcs	.+14     	; 0x10c <main+0x54>
  fe:	80 e0       	ldi	r24, 0x00	; 0
 100:	05 c0       	rjmp	.+10     	; 0x10c <main+0x54>
			PORTA = fnd[cnt];
		// SW2 == true
		} else if (PINE & (0x01 << PINE6)) {
 102:	0e 9b       	sbis	0x01, 6	; 1
 104:	0d c0       	rjmp	.+26     	; 0x120 <main+0x68>
			if(!prev) {
 106:	91 11       	cpse	r25, r1
 108:	01 c0       	rjmp	.+2      	; 0x10c <main+0x54>
				cnt--;
 10a:	81 50       	subi	r24, 0x01	; 1
				prev = 1;
			}
			if (cnt < 0) cnt = 15;
			PORTA = fnd[cnt];
 10c:	e1 e0       	ldi	r30, 0x01	; 1
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	ec 0f       	add	r30, r28
 112:	fd 1f       	adc	r31, r29
 114:	e8 0f       	add	r30, r24
 116:	f1 1d       	adc	r31, r1
 118:	90 81       	ld	r25, Z
 11a:	9b bb       	out	0x1b, r25	; 27
 11c:	91 e0       	ldi	r25, 0x01	; 1
 11e:	01 c0       	rjmp	.+2      	; 0x122 <main+0x6a>
		} else {
			// SW0 == false
			prev = 0;
 120:	90 e0       	ldi	r25, 0x00	; 0
		}
		
		// SW1 == true
		if (PINE & (0x01 << PINE5)) {
 122:	0d 9b       	sbis	0x01, 5	; 1
 124:	e5 cf       	rjmp	.-54     	; 0xf0 <main+0x38>
			cnt = 0;
			PORTA = fnd[cnt];
 126:	89 81       	ldd	r24, Y+1	; 0x01
 128:	8b bb       	out	0x1b, r24	; 27
 12a:	e1 cf       	rjmp	.-62     	; 0xee <main+0x36>

0000012c <_exit>:
 12c:	f8 94       	cli

0000012e <__stop_program>:
 12e:	ff cf       	rjmp	.-2      	; 0x12e <__stop_program>

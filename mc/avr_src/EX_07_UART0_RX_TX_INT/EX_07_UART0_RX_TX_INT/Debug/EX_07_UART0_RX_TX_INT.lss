
EX_07_UART0_RX_TX_INT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004e  00800100  00000256  000002ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000256  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000067  0080014e  0080014e  00000338  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000338  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000368  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  000003a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c46  00000000  00000000  00000430  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009a0  00000000  00000000  00001076  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000051d  00000000  00000000  00001a16  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000019c  00000000  00000000  00001f34  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004b4  00000000  00000000  000020d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003ef  00000000  00000000  00002584  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00002973  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	67 c0       	rjmp	.+206    	; 0x118 <__vector_18>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e5       	ldi	r30, 0x56	; 86
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ae 34       	cpi	r26, 0x4E	; 78
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ae e4       	ldi	r26, 0x4E	; 78
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a5 3b       	cpi	r26, 0xB5	; 181
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	74 d0       	rcall	.+232    	; 0x1ac <main>
  c4:	c6 c0       	rjmp	.+396    	; 0x252 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <run_command>:
#include "UART0.h"

char rx_str[100] = {0};
int i_flag = 0;

void run_command(const char *str) {
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	ec 01       	movw	r28, r24
	if(strcasecmp(str, "LED_ON") == 0) {
  ce:	60 e0       	ldi	r22, 0x00	; 0
  d0:	71 e0       	ldi	r23, 0x01	; 1
  d2:	ac d0       	rcall	.+344    	; 0x22c <strcasecmp>
  d4:	89 2b       	or	r24, r25
  d6:	41 f4       	brne	.+16     	; 0xe8 <run_command+0x20>
		PORTC |= (1 << PORTC0);
  d8:	85 b3       	in	r24, 0x15	; 21
  da:	81 60       	ori	r24, 0x01	; 1
  dc:	85 bb       	out	0x15, r24	; 21
		i_flag = 0;
  de:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <i_flag+0x1>
  e2:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <i_flag>
  e6:	15 c0       	rjmp	.+42     	; 0x112 <run_command+0x4a>
	} else if (strcasecmp(str, "LED_OFF") == 0) {
  e8:	67 e0       	ldi	r22, 0x07	; 7
  ea:	71 e0       	ldi	r23, 0x01	; 1
  ec:	ce 01       	movw	r24, r28
  ee:	9e d0       	rcall	.+316    	; 0x22c <strcasecmp>
  f0:	89 2b       	or	r24, r25
  f2:	41 f4       	brne	.+16     	; 0x104 <run_command+0x3c>
		PORTC &= ~(1 << PORTC0);
  f4:	85 b3       	in	r24, 0x15	; 21
  f6:	8e 7f       	andi	r24, 0xFE	; 254
  f8:	85 bb       	out	0x15, r24	; 21
		i_flag = 0;
  fa:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <i_flag+0x1>
  fe:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <i_flag>
 102:	07 c0       	rjmp	.+14     	; 0x112 <run_command+0x4a>
	} else {
		UART0_print_string("THERE IS NO COMMAND FOR : ");
 104:	8f e0       	ldi	r24, 0x0F	; 15
 106:	91 e0       	ldi	r25, 0x01	; 1
 108:	7c d0       	rcall	.+248    	; 0x202 <UART0_print_string>
		i_flag = 0;
 10a:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <i_flag+0x1>
 10e:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <i_flag>
	}
}
 112:	df 91       	pop	r29
 114:	cf 91       	pop	r28
 116:	08 95       	ret

00000118 <__vector_18>:

// 수신완료 인터럽트 서비스 루틴

SIGNAL(USART0_RX_vect) {
 118:	1f 92       	push	r1
 11a:	0f 92       	push	r0
 11c:	0f b6       	in	r0, 0x3f	; 63
 11e:	0f 92       	push	r0
 120:	11 24       	eor	r1, r1
 122:	0b b6       	in	r0, 0x3b	; 59
 124:	0f 92       	push	r0
 126:	2f 93       	push	r18
 128:	3f 93       	push	r19
 12a:	4f 93       	push	r20
 12c:	5f 93       	push	r21
 12e:	6f 93       	push	r22
 130:	7f 93       	push	r23
 132:	8f 93       	push	r24
 134:	9f 93       	push	r25
 136:	af 93       	push	r26
 138:	bf 93       	push	r27
 13a:	ef 93       	push	r30
 13c:	ff 93       	push	r31
	cli(); // 타 인터럽트 중지
 13e:	f8 94       	cli
	static unsigned char str_cnt = 0;
	unsigned char data = UDR0;
 140:	8c b1       	in	r24, 0x0c	; 12
	if (data == '\r' || str_cnt == 99){
 142:	8d 30       	cpi	r24, 0x0D	; 13
 144:	21 f0       	breq	.+8      	; 0x14e <__vector_18+0x36>
 146:	e0 91 4e 01 	lds	r30, 0x014E	; 0x80014e <__data_end>
 14a:	e3 36       	cpi	r30, 0x63	; 99
 14c:	79 f4       	brne	.+30     	; 0x16c <__vector_18+0x54>
		rx_str[str_cnt] = '\0';
 14e:	e0 91 4e 01 	lds	r30, 0x014E	; 0x80014e <__data_end>
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	ef 5a       	subi	r30, 0xAF	; 175
 156:	fe 4f       	sbci	r31, 0xFE	; 254
 158:	10 82       	st	Z, r1
		str_cnt = 0;
 15a:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__data_end>
		
		run_command(rx_str);
 15e:	81 e5       	ldi	r24, 0x51	; 81
 160:	91 e0       	ldi	r25, 0x01	; 1
 162:	b2 df       	rcall	.-156    	; 0xc8 <run_command>
		UART0_print_string(rx_str);
 164:	81 e5       	ldi	r24, 0x51	; 81
 166:	91 e0       	ldi	r25, 0x01	; 1
 168:	4c d0       	rcall	.+152    	; 0x202 <UART0_print_string>
 16a:	08 c0       	rjmp	.+16     	; 0x17c <__vector_18+0x64>
	} else {
		rx_str[str_cnt++] = data;
 16c:	91 e0       	ldi	r25, 0x01	; 1
 16e:	9e 0f       	add	r25, r30
 170:	90 93 4e 01 	sts	0x014E, r25	; 0x80014e <__data_end>
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	ef 5a       	subi	r30, 0xAF	; 175
 178:	fe 4f       	sbci	r31, 0xFE	; 254
 17a:	80 83       	st	Z, r24
	}
	sei(); // 타 인터럽트 허용
 17c:	78 94       	sei
}
 17e:	ff 91       	pop	r31
 180:	ef 91       	pop	r30
 182:	bf 91       	pop	r27
 184:	af 91       	pop	r26
 186:	9f 91       	pop	r25
 188:	8f 91       	pop	r24
 18a:	7f 91       	pop	r23
 18c:	6f 91       	pop	r22
 18e:	5f 91       	pop	r21
 190:	4f 91       	pop	r20
 192:	3f 91       	pop	r19
 194:	2f 91       	pop	r18
 196:	0f 90       	pop	r0
 198:	0b be       	out	0x3b, r0	; 59
 19a:	0f 90       	pop	r0
 19c:	0f be       	out	0x3f, r0	; 63
 19e:	0f 90       	pop	r0
 1a0:	1f 90       	pop	r1
 1a2:	18 95       	reti

000001a4 <LED_init>:

void LED_init(void) {
	DDRC |= (1 << PORTC0);
 1a4:	84 b3       	in	r24, 0x14	; 20
 1a6:	81 60       	ori	r24, 0x01	; 1
 1a8:	84 bb       	out	0x14, r24	; 20
 1aa:	08 95       	ret

000001ac <main>:
}

int main(void)
{
	LED_init();
 1ac:	fb df       	rcall	.-10     	; 0x1a4 <LED_init>
    UART0_init();
 1ae:	14 d0       	rcall	.+40     	; 0x1d8 <UART0_init>
 1b0:	8a b1       	in	r24, 0x0a	; 10
	// UART0_Rx_Interrupt();
	UCSR0B |= (1 << RXCIE0);	// 수신완료 개별 인터럽트 허용
 1b2:	80 68       	ori	r24, 0x80	; 128
 1b4:	8a b9       	out	0x0a, r24	; 10
 1b6:	78 94       	sei
	sei();						// 전체 인터럽트 허용
 1b8:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <i_flag>
	
    while (1) 
    {
		if(i_flag == 0) {
 1bc:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <i_flag+0x1>
 1c0:	89 2b       	or	r24, r25
 1c2:	d1 f7       	brne	.-12     	; 0x1b8 <main+0xc>
 1c4:	8a e2       	ldi	r24, 0x2A	; 42
			UART0_print_string("\n\r명령어를 입력하세요. : ");
 1c6:	91 e0       	ldi	r25, 0x01	; 1
 1c8:	1c d0       	rcall	.+56     	; 0x202 <UART0_print_string>
 1ca:	81 e0       	ldi	r24, 0x01	; 1
			i_flag = 1;	
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	90 93 50 01 	sts	0x0150, r25	; 0x800150 <i_flag+0x1>
 1d2:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <i_flag>
 1d6:	f0 cf       	rjmp	.-32     	; 0x1b8 <main+0xc>

000001d8 <UART0_init>:
 1d8:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	data = UDR0;
	if(data != '\r')
		UART0_transmit(data);
		
	return data;
}
 1dc:	87 e0       	ldi	r24, 0x07	; 7
 1de:	89 b9       	out	0x09, r24	; 9
 1e0:	1b b8       	out	0x0b, r1	; 11
 1e2:	8a b1       	in	r24, 0x0a	; 10
 1e4:	88 61       	ori	r24, 0x18	; 24
 1e6:	8a b9       	out	0x0a, r24	; 10
 1e8:	e5 e9       	ldi	r30, 0x95	; 149
 1ea:	f0 e0       	ldi	r31, 0x00	; 0
 1ec:	80 81       	ld	r24, Z
 1ee:	87 78       	andi	r24, 0x87	; 135
 1f0:	80 83       	st	Z, r24
 1f2:	80 81       	ld	r24, Z
 1f4:	86 60       	ori	r24, 0x06	; 6
 1f6:	80 83       	st	Z, r24
 1f8:	08 95       	ret

000001fa <UART0_transmit>:
 1fa:	5d 9b       	sbis	0x0b, 5	; 11
 1fc:	fe cf       	rjmp	.-4      	; 0x1fa <UART0_transmit>
 1fe:	8c b9       	out	0x0c, r24	; 12
 200:	08 95       	ret

00000202 <UART0_print_string>:



void UART0_print_string(const char *str)
{
 202:	0f 93       	push	r16
 204:	1f 93       	push	r17
 206:	cf 93       	push	r28
 208:	df 93       	push	r29
 20a:	8c 01       	movw	r16, r24
	// stop if str[i] == '\0'
	for(int i = 0; str[i]; i++)
 20c:	c0 e0       	ldi	r28, 0x00	; 0
 20e:	d0 e0       	ldi	r29, 0x00	; 0
 210:	02 c0       	rjmp	.+4      	; 0x216 <UART0_print_string+0x14>
		UART0_transmit(str[i]);
 212:	f3 df       	rcall	.-26     	; 0x1fa <UART0_transmit>


void UART0_print_string(const char *str)
{
	// stop if str[i] == '\0'
	for(int i = 0; str[i]; i++)
 214:	21 96       	adiw	r28, 0x01	; 1
 216:	f8 01       	movw	r30, r16
 218:	ec 0f       	add	r30, r28
 21a:	fd 1f       	adc	r31, r29
 21c:	80 81       	ld	r24, Z
 21e:	81 11       	cpse	r24, r1
 220:	f8 cf       	rjmp	.-16     	; 0x212 <UART0_print_string+0x10>
		UART0_transmit(str[i]);
}
 222:	df 91       	pop	r29
 224:	cf 91       	pop	r28
 226:	1f 91       	pop	r17
 228:	0f 91       	pop	r16
 22a:	08 95       	ret

0000022c <strcasecmp>:
 22c:	fb 01       	movw	r30, r22
 22e:	dc 01       	movw	r26, r24
 230:	8d 91       	ld	r24, X+
 232:	81 34       	cpi	r24, 0x41	; 65
 234:	1c f0       	brlt	.+6      	; 0x23c <strcasecmp+0x10>
 236:	8b 35       	cpi	r24, 0x5B	; 91
 238:	0c f4       	brge	.+2      	; 0x23c <strcasecmp+0x10>
 23a:	80 5e       	subi	r24, 0xE0	; 224
 23c:	61 91       	ld	r22, Z+
 23e:	61 34       	cpi	r22, 0x41	; 65
 240:	1c f0       	brlt	.+6      	; 0x248 <strcasecmp+0x1c>
 242:	6b 35       	cpi	r22, 0x5B	; 91
 244:	0c f4       	brge	.+2      	; 0x248 <strcasecmp+0x1c>
 246:	60 5e       	subi	r22, 0xE0	; 224
 248:	86 1b       	sub	r24, r22
 24a:	61 11       	cpse	r22, r1
 24c:	89 f3       	breq	.-30     	; 0x230 <strcasecmp+0x4>
 24e:	99 0b       	sbc	r25, r25
 250:	08 95       	ret

00000252 <_exit>:
 252:	f8 94       	cli

00000254 <__stop_program>:
 254:	ff cf       	rjmp	.-2      	; 0x254 <__stop_program>

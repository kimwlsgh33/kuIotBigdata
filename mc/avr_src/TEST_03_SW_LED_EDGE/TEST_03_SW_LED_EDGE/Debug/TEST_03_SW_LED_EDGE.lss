
TEST_03_SW_LED_EDGE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000016e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000011a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000016e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001a0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000854  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000077d  00000000  00000000  00000a54  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000295  00000000  00000000  000011d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001468  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f3  00000000  00000000  0000148c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000a4  00000000  00000000  0000187f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001923  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	3d c0       	rjmp	.+122    	; 0x116 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:
#define BASE = 0x01;
#define SW0 = (BASE << PINE4);

int main(void)
{
	DDRE &= ~0xF0;					// SW 입력설정
  9e:	82 b1       	in	r24, 0x02	; 2
  a0:	8f 70       	andi	r24, 0x0F	; 15
  a2:	82 b9       	out	0x02, r24	; 2
	DDRC |= 0x0F;					// LED 출력 설정
  a4:	84 b3       	in	r24, 0x14	; 20
  a6:	8f 60       	ori	r24, 0x0F	; 15
  a8:	84 bb       	out	0x14, r24	; 20
	pre_sw0 = 0;
	pre_sw1 = 0;
	unsigned char cur_sw0, cur_sw1;
	

	PORTC &= ~0x01;
  aa:	85 b3       	in	r24, 0x15	; 21
  ac:	8e 7f       	andi	r24, 0xFE	; 254
  ae:	85 bb       	out	0x15, r24	; 21
	
	// 
	unsigned char flag_led = 0;
	unsigned char pre_sw0, pre_sw1;
	pre_sw0 = 0;
	pre_sw1 = 0;
  b0:	70 e0       	ldi	r23, 0x00	; 0
	DDRC |= 0x0F;					// LED 출력 설정
	
	// 
	unsigned char flag_led = 0;
	unsigned char pre_sw0, pre_sw1;
	pre_sw0 = 0;
  b2:	60 e0       	ldi	r22, 0x00	; 0
{
	DDRE &= ~0xF0;					// SW 입력설정
	DDRC |= 0x0F;					// LED 출력 설정
	
	// 
	unsigned char flag_led = 0;
  b4:	50 e0       	ldi	r21, 0x00	; 0
  b6:	02 c0       	rjmp	.+4      	; 0xbc <main+0x1e>
  b8:	62 2f       	mov	r22, r18
  ba:	73 2f       	mov	r23, r19

	// while 문 -> sw 값을 저장 -> 다음 반복에서 비교
	while (1)
	{
		// 현재 값 갱신
		cur_sw0 = (PINE & (0x01 << PINE4))? 1 : 0;
  bc:	91 b1       	in	r25, 0x01	; 1
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	49 2f       	mov	r20, r25
  c2:	40 71       	andi	r20, 0x10	; 16
  c4:	94 ff       	sbrs	r25, 4
  c6:	80 e0       	ldi	r24, 0x00	; 0
  c8:	28 2f       	mov	r18, r24
		cur_sw1 = (PINE & (0x01 << PINE5))? 1 : 0;
  ca:	81 b1       	in	r24, 0x01	; 1
  cc:	80 72       	andi	r24, 0x20	; 32
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	31 e0       	ldi	r19, 0x01	; 1
  d2:	00 97       	sbiw	r24, 0x00	; 0
  d4:	09 f4       	brne	.+2      	; 0xd8 <main+0x3a>
  d6:	30 e0       	ldi	r19, 0x00	; 0

		//========================= flag 변수 사용법 ===============================
		if(cur_sw0 && pre_sw0 == 0) {
  d8:	44 23       	and	r20, r20
  da:	69 f0       	breq	.+26     	; 0xf6 <main+0x58>
  dc:	61 11       	cpse	r22, r1
  de:	0b c0       	rjmp	.+22     	; 0xf6 <main+0x58>
			if(flag_led & (0x01 << PORTC0)) {
  e0:	50 ff       	sbrs	r21, 0
  e2:	05 c0       	rjmp	.+10     	; 0xee <main+0x50>
				PORTC &= ~(0x01 << PORTC0);
  e4:	45 b3       	in	r20, 0x15	; 21
  e6:	4e 7f       	andi	r20, 0xFE	; 254
  e8:	45 bb       	out	0x15, r20	; 21
				flag_led &= ~(0x01 << PORTC0);
  ea:	5e 7f       	andi	r21, 0xFE	; 254
  ec:	04 c0       	rjmp	.+8      	; 0xf6 <main+0x58>
			} else {
				PORTC |= 0x01 << PORTC0;
  ee:	45 b3       	in	r20, 0x15	; 21
  f0:	41 60       	ori	r20, 0x01	; 1
  f2:	45 bb       	out	0x15, r20	; 21
				flag_led |= 0x01 << PORTC0;
  f4:	51 60       	ori	r21, 0x01	; 1
			}
			// _delay_ms(300);
		}

		if(cur_sw1 && pre_sw1 == 0) {
  f6:	89 2b       	or	r24, r25
  f8:	f9 f2       	breq	.-66     	; 0xb8 <main+0x1a>
  fa:	71 11       	cpse	r23, r1
  fc:	dd cf       	rjmp	.-70     	; 0xb8 <main+0x1a>
			if(flag_led & (0x01 << PORTC1)) {
  fe:	51 ff       	sbrs	r21, 1
 100:	05 c0       	rjmp	.+10     	; 0x10c <main+0x6e>
				PORTC &= ~(0x01 << PORTC1);
 102:	85 b3       	in	r24, 0x15	; 21
 104:	8d 7f       	andi	r24, 0xFD	; 253
 106:	85 bb       	out	0x15, r24	; 21
				flag_led &= ~(0x01 << PORTC1);
 108:	5d 7f       	andi	r21, 0xFD	; 253
 10a:	d6 cf       	rjmp	.-84     	; 0xb8 <main+0x1a>
			} else {
				PORTC |= 0x01 << PORTC1;
 10c:	85 b3       	in	r24, 0x15	; 21
 10e:	82 60       	ori	r24, 0x02	; 2
 110:	85 bb       	out	0x15, r24	; 21
				flag_led |= 0x01 << PORTC1;
 112:	52 60       	ori	r21, 0x02	; 2
 114:	d1 cf       	rjmp	.-94     	; 0xb8 <main+0x1a>

00000116 <_exit>:
 116:	f8 94       	cli

00000118 <__stop_program>:
 118:	ff cf       	rjmp	.-2      	; 0x118 <__stop_program>

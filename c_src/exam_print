#include <stdio.h>
// .h : header file (txt) => You can use printf function 

//********************** [ 1 ] ****************************
// () : /*unknown*/
main() {
	printf("hello, world\n");
{

//********************** [ 2 ] ****************************
// main function : entry point
// int : output type => industry standard
// void : input type  =>  input type is void (not exists)
int main(void)
{
	printf("hello, world\n");
	return 0;
}
// main() return 0; => OS => program execute success
// main() return -1; => OS => program execute failed
// printf : print format => specifying format and print
// \ : escape sequence

//********************** [ 3 ] ****************************
#include<stdio.h> 

// old-C++ style, firmware (electrics)
void main(void)
{
	printf("hello, world\n");
}

// firmware - there is no return => void
void main(void)
{
	// initialize
	for(;;)
	{
	}
}

//********************** [ 4 ] ****************************
int main(void)
{
	// compiler parse this as a single string
	// there is no "+" for string concat in C
	printf("hello,"
		"world\n"
	);
	return 0;
}

//********************** [ 5 ] ****************************
int main(void)
{
	// overhead
	printf("hello,");
	printf("world");
	printf("\n");
	return 0;
}

//********************** [ 6 ] ****************************
int main(void)
{
	// [] : array
	char str[] = "hello, world";
	printf("%s\n", str);
	return 0;
}

//********************** [ 7 ] ****************************
int main(void)
{
	// * : asterisk, pointer
	char *str = "hello, world";
	// %s : type indecator => string
	printf("%s\n", str);
	return 0;
}

//********************** [ 8 ] ****************************
int main(void)
{
	printf("%s\n", "hello, world");
	return 0;
}

//********************** [ 9 ] ****************************
int main(void)
{
	// The origin of printf function
	// output machine == file
	// stdout : standard output file
	fprintf(stdout, "hello, world"\n");
	return 0;
}

// UNIX => all machines are managed as a file
